[{"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\index.js":"1","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\serviceWorker.js":"2","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\App.js":"3","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\index.js":"4","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\store\\index.js":"5","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\bold.js":"6","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\heavy.js":"7","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\semibold.js":"8","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\light.js":"9","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\medium.js":"10","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\api\\index.js":"11","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\containers\\workorderscontainer\\index.js":"12","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\index.js":"13","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\index.js":"14","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\index.js":"15","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\context\\globalcontext\\index.js":"16","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\ctasectionreducer\\index.js":"17","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\oauthtokenreducer\\index.js":"18","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\emergencyworkordersreducer\\index.js":"19","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\useraccountdatareducer\\index.js":"20","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\pendingworkordersreducer\\index.js":"21","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderdetailsreducer\\index.js":"22","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\warrantymodalreducer\\index.js":"23","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderattachmentsreducer\\index.js":"24","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workordersnotesreducer\\index.js":"25","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\advancedsearchreducer\\index.js":"26","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderunassignedreducer\\index.js":"27","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderassignedtomereducer\\index.js":"28","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workordershistoryreducer\\index.js":"29","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\oauthtokenactions\\index.js":"30","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\warrantymodalactions\\index.js":"31","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderattachmentsactions\\index.js":"32","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\constants\\index.js":"33","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workordernotesactions\\index.js":"34","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderhistoryactions\\index.js":"35","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\advancedsearchactions\\index.js":"36","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderdetailsactions\\index.js":"37","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\unassignedworkordersactions\\index.js":"38","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\assignedtomeworkordersactions\\index.js":"39","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\pendingworkordersactions\\index.js":"40","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\useraccountdataactions\\index.js":"41","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\openworkordersactions\\index.js":"42","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\emercencyworkordersactions\\index.js":"43","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\ctasectionactions\\index.js":"44","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\alertComponent\\index.js":"45","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\index.js":"46","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\advancedsearchcomponent\\index.js":"47","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\index.js":"48","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\index.js":"49","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\index.js":"50","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\index.js":"51","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\index.js":"52","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\initialstate\\index.js":"53","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\index.js":"54","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\helpers\\index.js":"55","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\common\\index.js":"56","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\index.js":"57","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\index.js":"58","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\index.js":"59","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbypriority\\index.js":"60","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbystatus\\index.js":"61","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbyassettype\\index.js":"62","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\helpers\\getmodalstyle\\index.js":"63","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderprioritylayout\\index.js":"64","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderstatuslayout\\index.js":"65","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\ctasectionlayout\\index.js":"66","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderregularrowlayout\\index.js":"67","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\featuredctalayout\\index.js":"68","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rowbuilderlayout\\index.js":"69","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\reactwindowtablelayout\\index.js":"70","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\tablecolumnslayout\\index.js":"71","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderimagelayout\\index.js":"72","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rendersingleitemlayout\\index.js":"73","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\locationdetailslayout\\index.js":"74","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rendermultiitemlayout\\index.js":"75","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\enhanceddetailslayout\\index.js":"76","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\boxeddetailslayout\\index.js":"77","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\linkactionslayout\\index.js":"78","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\mainactionslayout\\index.js":"79","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\detailsimagelayout\\index.js":"80","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\workorderdesriptionclayout\\index.js":"81","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\detailslayout\\index.js":"82","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\maindetailslayout\\index.js":"83","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\index.js":"84","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\helpers\\rendernotnull\\index.js":"85","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\helpers\\rendernull\\index.js":"86","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\index.js":"87","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\constants\\index.js":"88","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rowbuilderlayout\\index.js":"89","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\tablecolumnslayout\\index.js":"90","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\reactwindowtablelayout\\index.js":"91","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rendersingleitemlayout\\index.js":"92","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\renderdateitemlayout\\index.js":"93","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rendermultiitemlayout\\index.js":"94","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\constants\\index.js":"95","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\popupcomponent\\index.js":"96","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\index.js":"97","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\not-fixed.js":"98","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\complete.js":"99","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\cancel.js":"100","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\reassigned.js":"101","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\add-note.js":"102","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\itemkeyhelper\\index.js":"103","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\createitemdatahelper\\index.js":"104","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\index.js":"105","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\itemkeyhelper\\index.js":"106","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\createitemdatahelper\\index.js":"107"},{"size":1342,"mtime":1601950627368,"results":"108","hashOfConfig":"109"},{"size":5086,"mtime":1597349025916,"results":"110","hashOfConfig":"109"},{"size":2422,"mtime":1610731669003,"results":"111","hashOfConfig":"109"},{"size":1780,"mtime":1602208011385,"results":"112","hashOfConfig":"109"},{"size":1429,"mtime":1604519258867,"results":"113","hashOfConfig":"109"},{"size":156083,"mtime":1602208011381,"results":"114","hashOfConfig":"109"},{"size":159783,"mtime":1602208011384,"results":"115","hashOfConfig":"109"},{"size":156918,"mtime":1602208011394,"results":"116","hashOfConfig":"109"},{"size":153363,"mtime":1602208011388,"results":"117","hashOfConfig":"109"},{"size":155416,"mtime":1602208011391,"results":"118","hashOfConfig":"109"},{"size":1440,"mtime":1610731644401,"results":"119","hashOfConfig":"109"},{"size":81094,"mtime":1610982775290,"results":"120","hashOfConfig":"109"},{"size":1380,"mtime":1604519258864,"results":"121","hashOfConfig":"109"},{"size":941,"mtime":1608218110827,"results":"122","hashOfConfig":"109"},{"size":1716,"mtime":1610467377079,"results":"123","hashOfConfig":"109"},{"size":89,"mtime":1604434464103,"results":"124","hashOfConfig":"109"},{"size":530,"mtime":1602011502361,"results":"125","hashOfConfig":"109"},{"size":517,"mtime":1602011502365,"results":"126","hashOfConfig":"109"},{"size":545,"mtime":1602011502362,"results":"127","hashOfConfig":"109"},{"size":543,"mtime":1607378509313,"results":"128","hashOfConfig":"109"},{"size":539,"mtime":1602011502366,"results":"129","hashOfConfig":"109"},{"size":866,"mtime":1609799366950,"results":"130","hashOfConfig":"109"},{"size":533,"mtime":1604519258865,"results":"131","hashOfConfig":"109"},{"size":552,"mtime":1602011502369,"results":"132","hashOfConfig":"109"},{"size":649,"mtime":1606159211233,"results":"133","hashOfConfig":"109"},{"size":554,"mtime":1604434464106,"results":"134","hashOfConfig":"109"},{"size":541,"mtime":1602011502373,"results":"135","hashOfConfig":"109"},{"size":544,"mtime":1602011502368,"results":"136","hashOfConfig":"109"},{"size":540,"mtime":1602011502371,"results":"137","hashOfConfig":"109"},{"size":810,"mtime":1602011502322,"results":"138","hashOfConfig":"109"},{"size":1264,"mtime":1604943235710,"results":"139","hashOfConfig":"109"},{"size":1084,"mtime":1605218443296,"results":"140","hashOfConfig":"109"},{"size":1754,"mtime":1610467377106,"results":"141","hashOfConfig":"109"},{"size":2074,"mtime":1610467377081,"results":"142","hashOfConfig":"109"},{"size":1047,"mtime":1604519258849,"results":"143","hashOfConfig":"109"},{"size":2062,"mtime":1610467377078,"results":"144","hashOfConfig":"109"},{"size":3243,"mtime":1610648699877,"results":"145","hashOfConfig":"109"},{"size":1076,"mtime":1607554926922,"results":"146","hashOfConfig":"109"},{"size":1105,"mtime":1610649213098,"results":"147","hashOfConfig":"109"},{"size":1066,"mtime":1607554926920,"results":"148","hashOfConfig":"109"},{"size":553,"mtime":1607554926923,"results":"149","hashOfConfig":"109"},{"size":1018,"mtime":1610467377080,"results":"150","hashOfConfig":"109"},{"size":1096,"mtime":1607554926919,"results":"151","hashOfConfig":"109"},{"size":1052,"mtime":1610552688631,"results":"152","hashOfConfig":"109"},{"size":938,"mtime":1608655283137,"results":"153","hashOfConfig":"109"},{"size":10523,"mtime":1610553031414,"results":"154","hashOfConfig":"109"},{"size":5366,"mtime":1610553031413,"results":"155","hashOfConfig":"109"},{"size":16206,"mtime":1610647611733,"results":"156","hashOfConfig":"109"},{"size":4018,"mtime":1610467377099,"results":"157","hashOfConfig":"109"},{"size":2248,"mtime":1610982666744,"results":"158","hashOfConfig":"109"},{"size":2909,"mtime":1610467377091,"results":"159","hashOfConfig":"109"},{"size":2217,"mtime":1610552688635,"results":"160","hashOfConfig":"109"},{"size":187,"mtime":1604434464108,"results":"161","hashOfConfig":"109"},{"size":237,"mtime":1605141776497,"results":"162","hashOfConfig":"109"},{"size":79,"mtime":1602795234181,"results":"163","hashOfConfig":"109"},{"size":5450,"mtime":1610649213100,"results":"164","hashOfConfig":"109"},{"size":926,"mtime":1604943235721,"results":"165","hashOfConfig":"109"},{"size":1987,"mtime":1603122022290,"results":"166","hashOfConfig":"109"},{"size":167,"mtime":1602011502338,"results":"167","hashOfConfig":"109"},{"size":772,"mtime":1610467377095,"results":"168","hashOfConfig":"109"},{"size":766,"mtime":1610467377096,"results":"169","hashOfConfig":"109"},{"size":748,"mtime":1610467377094,"results":"170","hashOfConfig":"109"},{"size":210,"mtime":1602805194040,"results":"171","hashOfConfig":"109"},{"size":4865,"mtime":1607559436837,"results":"172","hashOfConfig":"109"},{"size":6156,"mtime":1610982775287,"results":"173","hashOfConfig":"109"},{"size":2418,"mtime":1610467377088,"results":"174","hashOfConfig":"109"},{"size":488,"mtime":1607559436838,"results":"175","hashOfConfig":"109"},{"size":2068,"mtime":1610669787512,"results":"176","hashOfConfig":"109"},{"size":3311,"mtime":1610983362818,"results":"177","hashOfConfig":"109"},{"size":4085,"mtime":1610982666738,"results":"178","hashOfConfig":"109"},{"size":1203,"mtime":1608655283143,"results":"179","hashOfConfig":"109"},{"size":1467,"mtime":1610982775284,"results":"180","hashOfConfig":"109"},{"size":6925,"mtime":1610982775286,"results":"181","hashOfConfig":"109"},{"size":1362,"mtime":1603153688764,"results":"182","hashOfConfig":"109"},{"size":1439,"mtime":1610982775285,"results":"183","hashOfConfig":"109"},{"size":8997,"mtime":1610982666745,"results":"184","hashOfConfig":"109"},{"size":4370,"mtime":1610652151473,"results":"185","hashOfConfig":"109"},{"size":3219,"mtime":1610982666746,"results":"186","hashOfConfig":"109"},{"size":7955,"mtime":1610648517867,"results":"187","hashOfConfig":"109"},{"size":992,"mtime":1607554926958,"results":"188","hashOfConfig":"109"},{"size":1466,"mtime":1610552939085,"results":"189","hashOfConfig":"109"},{"size":956,"mtime":1610658983093,"results":"190","hashOfConfig":"109"},{"size":1913,"mtime":1607554926962,"results":"191","hashOfConfig":"109"},{"size":493,"mtime":1603153688757,"results":"192","hashOfConfig":"109"},{"size":9495,"mtime":1610982666743,"results":"193","hashOfConfig":"109"},{"size":449,"mtime":1602208011415,"results":"194","hashOfConfig":"109"},{"size":144,"mtime":1602011502341,"results":"195","hashOfConfig":"109"},{"size":429,"mtime":1610648175345,"results":"196","hashOfConfig":"109"},{"size":4964,"mtime":1604447600670,"results":"197","hashOfConfig":"109"},{"size":1512,"mtime":1603153688763,"results":"198","hashOfConfig":"109"},{"size":2921,"mtime":1610982666742,"results":"199","hashOfConfig":"109"},{"size":1121,"mtime":1604447600669,"results":"200","hashOfConfig":"109"},{"size":638,"mtime":1603153688760,"results":"201","hashOfConfig":"109"},{"size":2147,"mtime":1609799366939,"results":"202","hashOfConfig":"109"},{"size":541,"mtime":1610648083757,"results":"203","hashOfConfig":"109"},{"size":3492,"mtime":1609799366938,"results":"204","hashOfConfig":"109"},{"size":277,"mtime":1610467377083,"results":"205","hashOfConfig":"109"},{"size":150,"mtime":1602208011398,"results":"206","hashOfConfig":"109"},{"size":149,"mtime":1602208011396,"results":"207","hashOfConfig":"109"},{"size":145,"mtime":1602208011396,"results":"208","hashOfConfig":"109"},{"size":153,"mtime":1602208011399,"results":"209","hashOfConfig":"109"},{"size":148,"mtime":1602208011395,"results":"210","hashOfConfig":"109"},{"size":228,"mtime":1607559436833,"results":"211","hashOfConfig":"109"},{"size":242,"mtime":1610982666737,"results":"212","hashOfConfig":"109"},{"size":144,"mtime":1602795234187,"results":"213","hashOfConfig":"109"},{"size":597,"mtime":1604447600666,"results":"214","hashOfConfig":"109"},{"size":225,"mtime":1602795234187,"results":"215","hashOfConfig":"109"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},"1f7jcx",{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"218"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"218"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"218"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"218"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"218"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"218"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"218"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"436"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\index.js",[],["439","440"],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\serviceWorker.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\App.js",["441","442","443","444","445"],"//Basic Imports\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport IdleTimer from 'react-idle-timer'\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\n//Containers\r\nimport WorkOrdersContainer from './containers/workorderscontainer'\r\n\r\nimport {\r\n  apiUsers\r\n} from './api'\r\n\r\nconst App = () => {\r\n  const redirect = () => {\r\n    window.top.location.href='/admin/WorkOrders'\r\n  }\r\n  const forceLogin = () => {\r\n    window.top.location.href='/admin/Users/index_new'\r\n  }   \r\n\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [userRole, setUserRole] = useState(\"3\");\r\n  const [userStatus, setUserStatus] = useState(\"success\");\r\n  const [idleUpdate, setIdleUpdate] = useState(false);\r\n\r\n  //First check\r\n  useEffect(() => {\r\n    /*axios.get(apiUsers)\r\n    .then(res => {\r\n\r\n      const payloadData = res.data;\r\n      console.log(payloadData)\r\n      setUserRole(payloadData.user.role_id);\r\n      setUserStatus(payloadData.status);\r\n      setLoading(false);\r\n    })*/\r\n    \r\n\r\n  }, [idleUpdate]);\r\n\r\n\r\n  const IdleTimerComponent = () => {\r\n    const idleTimerRef = useRef(null)\r\n    const handleOnActive = (event) => {\r\n      //console.log('user is active', event)\r\n      if(idleUpdate !== false){\r\n        onIdle()\r\n      }\r\n    }     \r\n    const onIdle = () => {\r\n        console.log(\"User idle!\")\r\n        setIdleUpdate(true)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <IdleTimer \r\n                ref={idleTimerRef}\r\n                timeout={10000 * 1000}\r\n                onIdle={onIdle}\r\n                onAction={handleOnActive}\r\n            />\r\n        </div>\r\n    );\r\n  };\r\n\r\n  let conditionalRender\r\n  let conditionalRedirect\r\n  if (isLoading) {\r\n    return  <div className=\"loading-container\">\r\n              <CircularProgress />\r\n            </div>;\r\n  }\r\n  //Role ID - not allowed to access to workorders landing page (new/react)\r\n  if (userRole===\"1\" || userRole===\"2\") {\r\n    conditionalRender = false\r\n    conditionalRedirect = redirect()    \r\n  }else if(userStatus===\"error\") {\r\n    conditionalRender = false\r\n    conditionalRedirect = forceLogin()\r\n  } else {\r\n    conditionalRender = true\r\n  }\r\n\r\n  const Body = (\r\n    <>\r\n      <IdleTimerComponent  />\r\n      <WorkOrdersContainer />\r\n    </>\r\n  )\r\n  return (\r\n    conditionalRender===true?Body:conditionalRedirect\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\store\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\bold.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\heavy.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\semibold.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\light.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\medium.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\api\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\containers\\workorderscontainer\\index.js",["446"],"//Basic imports\r\nimport React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\n//Components\r\nimport { \r\n    CTASectionComponent, \r\n    DataTableComponent, \r\n    WorkOrderDetailsComponent,\r\n    Alert, \r\n} from '../../components'\r\n\r\n//Material UI\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Link from '@material-ui/core/Link';\r\n\r\n//Actions\r\nimport { \r\n    oauthFetchToken,\r\n    fetchUsersInformation,\r\n    fetchCTAsData, \r\n    fetchSearchData,\r\n    fetchEmergencyWOData, \r\n    fetchOpenWOData, \r\n    fetchPendingWOData, \r\n    fetchDetailsWOData,\r\n    fetchAssignedToMeWOData,\r\n    fetchUnassignedWOData,\r\n    //fetchHistoryWOData,\r\n    fetchNotesWOData,\r\n    fetchAttachmentsWOData,\r\n    fetchWarrantyWOData,\r\n    createNoteWOData,\r\n    updateWOStatus,\r\n    //fetchServiceProviders,\r\n} from '../../actions';\r\n\r\n//Context\r\nimport { GlobalContext } from '../../context/globalcontext'\r\n\r\n\r\n//Declaring global variables\r\n//Token\r\nlet token\r\n//User ID\r\nlet userId\r\nlet userData\r\n//CTA component\r\nlet ctadata\r\n//Datatable component\r\nlet tmpdata\r\nlet tmpDataAmount\r\n//Details component\r\nlet detailsdata\r\n//Tab component\r\n//let historydata\r\nlet notesdata\r\nlet attachmentsdata\r\nlet dtlsID\r\nlet trgtID\r\n//Search\r\nlet searchTerm\r\nlet searchBy\r\n//Warranty\r\nlet warrantydata\r\n//Filter\r\nlet filterByAssetType\r\nlet filterByStatus\r\nlet filterByPriority\r\n\r\nlet newNote\r\nlet newNoteAvailable\r\nlet noteDescription\r\n\r\nlet workOrderUpdateResponse\r\nlet updatedStatus\r\nlet reassignToVal\r\n//let serviceProviders\r\n\r\nclass WorkOrdersBuilder extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            targetId: \"emergencyWO\",\r\n            detailsId: \"\",\r\n            loading: false,\r\n            loadingDetails: false,\r\n            loadingAll: false,\r\n            searchTerm: \"\", \r\n            searchBy: 1,\r\n            filterByAssetType: 1,\r\n            filterByStatus: 1,\r\n            filterByPriority: 1,\r\n            newNote: '',\r\n            newNoteAvailable: false,\r\n            noteDescription: '',\r\n            workOrderUpdateResponse: '',\r\n            updatedStatus: '',\r\n            reassignToVal: 1,\r\n            reassignToAvailable: false,\r\n            itsActive: false\r\n        };\r\n    }    \r\n    handleChangeStateSearchTerm = (value) => {\r\n        searchTerm = value     \r\n    }\r\n    handleSearchTerm = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            searchTerm: value,\r\n        }, this.handleChangeStateSearchTerm(value));\r\n    } \r\n    handleChangeStateSearchBy = (value) => {\r\n        searchBy = value  \r\n    }    \r\n    handleSearchBy = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            searchBy: value\r\n        }, this.handleChangeStateSearchBy(value));\r\n    }\r\n    handleChangeStateFilterByAssetType = (value) => {\r\n        filterByAssetType = value       \r\n        console.log(filterByAssetType)\r\n    }    \r\n    handleFilterByAssetType = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            filterByAssetType: value,\r\n        }, this.handleChangeStateFilterByAssetType(value))\r\n    } \r\n    handleChangeStateFilterByStatus = (value) => {\r\n        filterByStatus = value \r\n        console.log(filterByStatus)\r\n    }    \r\n    handleFilterByStatus = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            filterByStatus: value,\r\n        }, this.handleChangeStateFilterByStatus(value))        \r\n    } \r\n    handleChangeStateFilterByPriority = (value) => {\r\n        filterByPriority = value       \r\n        console.log(filterByPriority)\r\n    }    \r\n    handleFilterByPriority = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            filterByPriority: value,\r\n        }, this.handleChangeStateFilterByPriority(value))        \r\n    }\r\n\r\n    handleChangeStateFilterClearAll = () => {\r\n        filterByPriority = 1;\r\n        filterByStatus = 1;\r\n        filterByAssetType = 1; \r\n    }\r\n\r\n    handleFilterClearAll = (event) => {\r\n        this.setState({\r\n            filterByAssetType: 1,\r\n            filterByStatus: 1,\r\n            filterByPriority: 1,\r\n        }, this.handleChangeStateFilterClearAll()) \r\n    }\r\n\r\n    handleChangeNoteInput = (value) => {\r\n        noteDescription = value;\r\n        console.log(\"description\", noteDescription)\r\n    }\r\n    handleNoteInput = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            noteDescription: value\r\n        }, this.handleChangeNoteInput(value))\r\n    }\r\n\r\n    handleAddNote = (isAvailable) => {\r\n        newNoteAvailable = isAvailable\r\n        console.log(newNoteAvailable)\r\n    }\r\n    createNoteWOData = (event) => {\r\n        this.setState({\r\n            newNoteAvailable: !newNoteAvailable,\r\n            loadingDetails: true\r\n        }, this.handleAddNote(!newNoteAvailable))\r\n    }\r\n\r\n    handleChangeReassignToSelect = (value) => {\r\n        reassignToVal = value\r\n        //console.log('reassignToVal', reassignToVal)\r\n    }\r\n    handleReassignToSelect = (event) => {\r\n        console.log(\"id\", event.target)\r\n        let value = event.target.value\r\n        this.setState({\r\n            reassignToVal: value\r\n        }, this.handleChangeReassignToSelect(value))\r\n    }\r\n\r\n    handleUpdateStatus = (target) => {\r\n        if(target === \"CANCEL\"){\r\n            updatedStatus = \"CANCELLED\"\r\n        } else {\r\n            updatedStatus = target\r\n        }\r\n        console.log(\"updatedStatus\", updatedStatus)\r\n    }\r\n    updateWOStatus = (event) => {\r\n        let target = event.target.parentElement.getAttribute(\"status\")\r\n        if(target !== 'Reassign' && !!target) {\r\n            target = target.toUpperCase().replace(' ', '_')\r\n            this.setState({\r\n                updatedStatus: target,\r\n                // loadingDetails: true,\r\n            }, this.handleUpdateStatus(target))\r\n        } else {\r\n            target = target.toUpperCase().replace(' ', '_')\r\n            this.setState({\r\n                updatedStatus: target,\r\n                reassignToAvailable: !this.state.reassignToAvailable,\r\n                // loadingDetails: true,\r\n            }, this.handleUpdateStatus(target))\r\n        }\r\n    }\r\n    handleDynamicDetails = (target) => {\r\n        dtlsID = target \r\n    }           \r\n    dynamicDetails = (event) => {\r\n        event.preventDefault();\r\n        let target = event.target.id\r\n        if(target.length>0){\r\n            if(target !== this.state.detailsId) {\r\n                this.setState({\r\n                    detailsId: target,\r\n                    loadingDetails: true\r\n                }, this.handleDynamicDetails(target))\r\n            }\r\n        }else{\r\n            target = event.target.closest('.datatable-row')\r\n            target = target.id\r\n            if(!!target && target !== this.state.detailsId) {\r\n                this.setState({\r\n                    detailsId: target,\r\n                    loadingDetails: true\r\n                },  this.handleDynamicDetails(target))\r\n            }\r\n        }\r\n    }\r\n    handleDynamicData = (target) => {\r\n        trgtID = target\r\n    }      \r\n    dynamicData = (event) => {\r\n        event.preventDefault();\r\n        let target = event.target.id\r\n        if(target.length>0){\r\n            this.setState({\r\n                targetId: target,\r\n                // loading: true\r\n            }, this.handleDynamicData(target))\r\n        }else{\r\n            target = event.target.closest('div')\r\n            target = target.id\r\n            this.setState({\r\n                targetId: target,\r\n                // loading: true\r\n            }, this.handleDynamicData(target))\r\n        }\r\n        \r\n    }\r\n    sortWOByCreatedDate = (data) => {\r\n        data.sort((a, b) => b.workOrderId-a.workOrderId);\r\n        data.sort((a, b) => b.dateCreated-a.dateCreated);\r\n    }\r\n    \r\n    async componentDidMount() {\r\n        token = await this.props.oauthFetchToken()\r\n        /*\r\n        userData = await this.props.fetchUsersInformation()\r\n        userId = userData.userdata.user.user_id   \r\n        */\r\n        //Next line it's to develop in local     \r\n        userId = \"2152\"\r\n        this.setState({ \r\n            firstLoading: true\r\n        })\r\n        ctadata = await this.props.fetchCTAsData()\r\n\r\n        tmpdata = await this.props.fetchEmergencyWOData()  \r\n        if(tmpdata.data.work_orders!==undefined) {\r\n            this.sortWOByCreatedDate(tmpdata.data.work_orders);\r\n            dtlsID = tmpdata.data.work_orders[0]['workOrderId']\r\n            tmpDataAmount = tmpdata.data.work_orders.length\r\n            this.setState({\r\n                detailsId: dtlsID,\r\n            })\r\n        }      \r\n        //historydata = await this.props.fetchHistoryWOData()\r\n        detailsdata = await this.props.fetchDetailsWOData()\r\n        notesdata = await this.props.fetchNotesWOData()\r\n        //serviceProviders = await this.props.fetchServiceProviders();\r\n        // this.sortOrderNotesByDate()\r\n        warrantydata = await this.props.fetchWarrantyWOData()\r\n        attachmentsdata = await this.props.fetchAttachmentsWOData()\r\n        this.setState({ firstLoading: false })\r\n        trgtID = trgtID===undefined?this.state.targetId:trgtID\r\n    }\r\n\r\n    /**\r\n     * handleId() => loads data changes\r\n     * handleAsyncId() => call async functions since cannot be pass through setState as callback\r\n     * handleChangePrevState() => trigger setState \r\n     * \r\n     * Author: Carlos Blanco\r\n     * Date: 11/13/2020\r\n     * Ticket: ET-735\r\n     * */\r\n    handleId = async(id) => {\r\n        dtlsID = id\r\n        detailsdata = await this.props.fetchDetailsWOData(dtlsID, token)\r\n        notesdata = await this.props.fetchNotesWOData(dtlsID, token)\r\n        // this.sortOrderNotesByDate()\r\n        attachmentsdata = await this.props.fetchAttachmentsWOData(dtlsID, token)\r\n        //historydata = await this.props.fetchHistoryWOData(dtlsID, token)\r\n        warrantydata = await this.props.fetchWarrantyWOData(dtlsID, token)                  \r\n    }\r\n\r\n    handleAsyncId = (id) => {\r\n        dtlsID = id\r\n        this.handleId(dtlsID)\r\n    }\r\n    //Change details data\r\n    handleChangePrevState = (id) => {\r\n        dtlsID = id     \r\n        this.setState({\r\n            detailsId: dtlsID,\r\n            loading: true\r\n        }, this.handleAsyncId(id))        \r\n    }\r\n    //move active item to the top of grid\r\n    // array_move = (arr, old_index, new_index) => {\r\n    //     if (new_index >= arr.length) {\r\n    //         let k = new_index - arr.length + 1;\r\n    //         while (k--) {\r\n    //             arr.push(undefined);\r\n    //         }\r\n    //     }\r\n    //     arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n    //     return arr;\r\n    // };\r\n    // isCurrent = (element) => element.workOrderId.toString() === this.state.detailsId.toString();\r\n\r\n    async componentDidUpdate(prevProps, prevState) {\r\n\r\n        const currentState = this.state.targetId\r\n        //const props = this.props\r\n        const searchTermIn = this.state.searchTerm\r\n        const searchByIn = this.state.searchBy  \r\n        const filterByInByAssetType = this.state.filterByAssetType\r\n        const filterByInByStatus = this.state.filterByStatus\r\n        const filterByInByPriority = this.state.filterByPriority\r\n        if(\r\n            prevState.targetId !== this.state.targetId ||\r\n            prevState.detailsId !== this.state.detailsId ||\r\n            prevState.searchTerm !== this.state.searchTerm ||\r\n            prevState.searchBy !== this.state.searchBy ||\r\n            prevState.filterByAssetType !== this.state.filterByAssetType ||\r\n            prevState.filterByStatus !== this.state.filterByStatus ||\r\n            prevState.filterByPriority !== this.state.filterByPriority ||\r\n            prevState.newNoteAvailable !== this.state.newNoteAvailable ||\r\n            prevState.updatedStatus !== this.state.updatedStatus ||\r\n            prevState.reassignToAvailable !== this.state.reassignToAvailable\r\n        ) {\r\n            this.setState({loading: true})\r\n            //Clean input if lenght is 0\r\n            if(searchTermIn.length===0) {\r\n                this.setState({\r\n                    searchTerm: \"\",\r\n                })\r\n            }     \r\n            const filterData = ({dataSearch, filterByInByAssetType=[], filterByInByStatus=[], filterByInByPriority=[]}) => {\r\n                console.log(\"filterByInByStatus\", filterByInByStatus);\r\n                if(filterByInByAssetType.length>0) {\r\n                    dataSearch = dataSearch.filter(term => {\r\n                        let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    })\r\n                }\r\n                if(filterByInByStatus.length>0) {\r\n                    dataSearch = dataSearch.filter(term => {\r\n                        let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    })\r\n                }\r\n                if(filterByInByPriority.length>0) {\r\n                    dataSearch = dataSearch.filter(term => {\r\n                        let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    })                         \r\n                }\r\n                return dataSearch;\r\n            }\r\n            let tmp\r\n            let dataSearch\r\n            let dataSearchTemp\r\n            //Set/Search/Filter data for DataTable Component\r\n            /*\r\n            let incomingData = setSearchFilterHelper({\r\n                tmpdata,\r\n                searchTerm,\r\n                searchTermIn,\r\n                searchByIn,\r\n                filterByInByAssetType,\r\n                filterByInByStatus,\r\n                filterByInByPriority,\r\n                currentState,\r\n                props\r\n            })\r\n            incomingData.then(res => {\r\n                console.log(res)\r\n                tmpdata = res\r\n            })\r\n            */\r\n           if(prevState.detailsId === this.state.detailsId) {\r\n\r\n                switch (currentState) {\r\n                    /**\r\n                     * All \"term\" arrays elements should be modified in order\r\n                     * to work with the new APIs\r\n                     */\r\n                    //Each case should be the CTA id\r\n                    case \"emergencyWO\":\r\n                        // if(searchTermIn.length>3 && searchByIn<=1) {\r\n                        //     let tmp = await this.props.fetchEmergencyWOData()\r\n                        //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        //     if(filterByInByAssetType.length>0){\r\n                        //         let dataSearched = dataSearch.filter(term => term['description'].includes(searchTerm.toLowerCase()))\r\n                        //         dataSearched = dataSearched.filter(term => term['asset']['assetType']['description'].toLowerCase().includes(filterByInByAssetType.toLowerCase()))\r\n                        //         // if(filterByInByPriority.length>0) {\r\n                        //         //     dataSearched = dataSearched.filter(term => {\r\n                        //         //         let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        //         //         return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        //         //     })\r\n                        //         // }\r\n                        //         if(filterByInByStatus.length>0) {\r\n                        //             dataSearched = dataSearched.filter(term => {\r\n                        //                 let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        //                 return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        //             })                         \r\n                        //         }\r\n                        //         tmpdata = {\r\n                        //             data: {\r\n                        //                 work_orders: dataSearched\r\n                        //             }\r\n                        //         }                            \r\n                        //     } else {\r\n                        //         let dataSearched = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                        //         console.log(dataSearched)\r\n                        //         tmpdata = {\r\n                        //             data: {\r\n                        //                 work_orders: dataSearched\r\n                        //             }\r\n                        //         } \r\n                        //     }\r\n                        // }else if(searchTermIn.length>3 && searchByIn>1){\r\n                        //     let tmp = await this.props.fetchSearchData()\r\n                        //     let dataSearched = tmp.data?tmp.data.work_orders:[]                        \r\n                        //     // if(filterByInByPriority.length>0) {\r\n                        //     //     dataSearched = dataSearched.filter(term => {\r\n                        //     //         let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        //     //         return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        //     //     })\r\n                        //     //     tmpdata = {\r\n                        //     //         data: {\r\n                        //     //             work_orders: dataSearched\r\n                        //     //         }\r\n                        //     //     }                             \r\n                        //     // } \r\n                        //     if(filterByInByStatus.length>0) {\r\n                        //         dataSearched = dataSearched.filter(term => {\r\n                        //             let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        //             return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        //         })\r\n                        //         tmpdata = {\r\n                        //             data: {\r\n                        //                 work_orders: dataSearched\r\n                        //             }\r\n                        //         }                                                      \r\n                        //     } else if(filterByInByAssetType.length>0) {\r\n                        //         dataSearched = dataSearched.filter(term => {\r\n                        //             let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                        //             return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        //         })\r\n                        //         tmpdata = {\r\n                        //             data: {\r\n                        //                 work_orders: dataSearched\r\n                        //             }\r\n                        //         }   \r\n                        //     } else {\r\n                        //         tmpdata = await this.props.fetchSearchData()\r\n                        //     }                        \r\n                        // //Default filter by asset type without search                        \r\n                        // }else if(filterByInByAssetType.length>0) {\r\n                        //     let tmp = await this.props.fetchEmergencyWOData()\r\n                        //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        //     let dataSearched = dataSearch.filter(term => {\r\n                        //         let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                        //         return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        //     })\r\n                        //     // if(filterByInByPriority.length>0) {\r\n                        //     //     dataSearched = dataSearched.filter(term => {\r\n                        //     //         let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        //     //         return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        //     //     })\r\n                        //     // } \r\n                        //     if(filterByInByStatus.length>0) {\r\n                        //         dataSearched = dataSearched.filter(term => {\r\n                        //             let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        //             return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        //         })                         \r\n                        //     }                        \r\n                        //     tmpdata = {\r\n                        //         data: {\r\n                        //             work_orders: dataSearched\r\n                        //         }\r\n                        //     }\r\n                        // //Default filter by status without search   \r\n                        // }else if(filterByInByStatus.length>0) {\r\n                        //     let tmp = await this.props.fetchEmergencyWOData()\r\n                        //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        //     let dataSearched = dataSearch.filter(term => {\r\n                        //         let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        //         return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        //     })\r\n                        //     if(filterByInByAssetType.length>0) {\r\n                        //         dataSearched = dataSearched.filter(term => {\r\n                        //             let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                        //             return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        //         })\r\n                        //     } else if(filterByInByPriority.length>0) {\r\n                        //         dataSearched = dataSearched.filter(term => {\r\n                        //             let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        //             return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        //         })                         \r\n                        //     }                        \r\n                        //     tmpdata = {\r\n                        //         data: {\r\n                        //             work_orders: dataSearched\r\n                        //         }\r\n                        //     }  \r\n                        // //Default filter by priority without search   \r\n                        // }\r\n                        // // else if(filterByInByPriority.length>0) {\r\n                        // //     let tmp = await this.props.fetchEmergencyWOData()\r\n                        // //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        // //     let dataSearched = dataSearch.filter(term => {\r\n                        // //         let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        // //         return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        // //     })\r\n                        // //     if(filterByInByAssetType.length>0) {\r\n                        // //         dataSearched = dataSearched.filter(term => {\r\n                        // //             let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                        // //             return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        // //         })\r\n                        // //     } else if(filterByInByStatus.length>0) {\r\n                        // //         dataSearched = dataSearched.filter(term => {\r\n                        // //             let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        // //             return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        // //         })                         \r\n                        // //     }                        \r\n                        // //     tmpdata = {\r\n                        // //         data: {\r\n                        // //             work_orders: dataSearched\r\n                        // //         }\r\n                        // //     }                                              \r\n                        // // }\r\n                        // else if(searchTermIn.length === 0 && this.state.firstLoading === false) {\r\n                        //     tmpdata = await this.props.fetchEmergencyWOData()\r\n                        // }     \r\n                        tmp = await this.props.fetchEmergencyWOData()\r\n                        dataSearch = tmp.data?tmp.data.work_orders:[]  \r\n                        if(searchTermIn.length>3) {\r\n                            if(searchByIn<=1) {\r\n                                dataSearch = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                            } else {\r\n                                let tmpl = await this.props.fetchSearchData();\r\n                                dataSearchTemp = tmpl.data?tmpl.data.work_orders:[]\r\n                                dataSearch = dataSearch.filter(term => JSON.stringify(dataSearchTemp).includes(JSON.stringify(term)));\r\n                            }           \r\n                        }\r\n                        dataSearch = filterData({dataSearch, filterByInByAssetType, filterByInByStatus});\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearch\r\n                            }\r\n                        }\r\n                        break; \r\n                    case \"openWO\":\r\n                        // if(searchTermIn.length>3 && searchByIn<=1) {\r\n                        //     let tmp = await this.props.fetchOpenWOData()\r\n                        //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        //     if(filterByInByAssetType.length>0){\r\n                        //         let dataSearched = dataSearch.filter(term => term['description'].includes(searchTerm.toLowerCase()))\r\n                        //         dataSearched = dataSearched.filter(term => term['asset']['assetType']['description'].toLowerCase().includes(filterByInByAssetType.toLowerCase()))\r\n                        //         if(filterByInByPriority.length>0) {\r\n                        //             dataSearched = dataSearched.filter(term => {\r\n                        //                 let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        //                 return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        //             })\r\n                        //         } else if(filterByInByStatus.length>0) {\r\n                        //             dataSearched = dataSearched.filter(term => {\r\n                        //                 let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        //                 return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        //             })                         \r\n                        //         }\r\n                        //         tmpdata = {\r\n                        //             data: {\r\n                        //                 work_orders: dataSearched\r\n                        //             }\r\n                        //         }                            \r\n                        //     } else {\r\n                        //         let dataSearched = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                        //         console.log(dataSearched)\r\n                        //         tmpdata = {\r\n                        //             data: {\r\n                        //                 work_orders: dataSearched\r\n                        //             }\r\n                        //         } \r\n                        //     }\r\n                        // }else if(searchTermIn.length>3 && searchByIn>1){\r\n                        //     let tmp = await this.props.fetchSearchData()\r\n                        //     let dataSearched = tmp.data?tmp.data.work_orders:[]                        \r\n                        //     if(filterByInByPriority.length>0) {\r\n                        //         dataSearched = dataSearched.filter(term => {\r\n                        //             let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        //             return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        //         })\r\n                        //         tmpdata = {\r\n                        //             data: {\r\n                        //                 work_orders: dataSearched\r\n                        //             }\r\n                        //         }                             \r\n                        //     } else if(filterByInByStatus.length>0) {\r\n                        //         dataSearched = dataSearched.filter(term => {\r\n                        //             let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        //             return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        //         })\r\n                        //         tmpdata = {\r\n                        //             data: {\r\n                        //                 work_orders: dataSearched\r\n                        //             }\r\n                        //         }                                                      \r\n                        //     } else if(filterByInByAssetType.length>0) {\r\n                        //         dataSearched = dataSearched.filter(term => {\r\n                        //             let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                        //             return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        //         })\r\n                        //         tmpdata = {\r\n                        //             data: {\r\n                        //                 work_orders: dataSearched\r\n                        //             }\r\n                        //         }   \r\n                        //     } else {\r\n                        //         tmpdata = await this.props.fetchSearchData()\r\n                        //     }                        \r\n                        // //Default filter by asset type without search                        \r\n                        // }else if(filterByInByAssetType.length>0) {\r\n                        //     let tmp = await this.props.fetchOpenWOData()\r\n                        //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        //     let dataSearched = dataSearch.filter(term => {\r\n                        //         let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                        //         return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        //     })\r\n                        //     if(filterByInByPriority.length>0) {\r\n                        //         dataSearched = dataSearched.filter(term => {\r\n                        //             let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        //             return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        //         })\r\n                        //     } else if(filterByInByStatus.length>0) {\r\n                        //         dataSearched = dataSearched.filter(term => {\r\n                        //             let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        //             return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        //         })                         \r\n                        //     }                        \r\n                        //     tmpdata = {\r\n                        //         data: {\r\n                        //             work_orders: dataSearched\r\n                        //         }\r\n                        //     }\r\n                        // //Default filter by status without search   \r\n                        // }else if(filterByInByStatus.length>0) {\r\n                        //     let tmp = await this.props.fetchOpenWOData()\r\n                        //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        //     let dataSearched = dataSearch.filter(term => {\r\n                        //         let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        //         return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        //     })\r\n                        //     if(filterByInByAssetType.length>0) {\r\n                        //         dataSearched = dataSearched.filter(term => {\r\n                        //             let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                        //             return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        //         })\r\n                        //     } else if(filterByInByPriority.length>0) {\r\n                        //         dataSearched = dataSearched.filter(term => {\r\n                        //             let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        //             return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        //         })                         \r\n                        //     }                        \r\n                        //     tmpdata = {\r\n                        //         data: {\r\n                        //             work_orders: dataSearched\r\n                        //         }\r\n                        //     }  \r\n                        // //Default filter by priority without search   \r\n                        // }else if(filterByInByPriority.length>0) {\r\n                        //     let tmp = await this.props.fetchOpenWOData()\r\n                        //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        //     let dataSearched = dataSearch.filter(term => {\r\n                        //         let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        //         return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        //     })\r\n                        //     if(filterByInByAssetType.length>0) {\r\n                        //         dataSearched = dataSearched.filter(term => {\r\n                        //             let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                        //             return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        //         })\r\n                        //     } else if(filterByInByStatus.length>0) {\r\n                        //         dataSearched = dataSearched.filter(term => {\r\n                        //             let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        //             return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        //         })                         \r\n                        //     }                        \r\n                        //     tmpdata = {\r\n                        //         data: {\r\n                        //             work_orders: dataSearched\r\n                        //         }\r\n                        //     }                                              \r\n                        // }else if(searchTermIn.length === 0 && this.state.firstLoading === false) {\r\n                        //     tmpdata = await this.props.fetchOpenWOData()\r\n                        // }   \r\n                        tmp = await this.props.fetchOpenWOData()\r\n                        dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        if(searchTermIn.length>3) {\r\n                            if(searchByIn<=1) {\r\n                                dataSearch = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                            } else {\r\n                                let tmpl = await this.props.fetchSearchData();\r\n                                dataSearchTemp = tmpl.data?tmpl.data.work_orders:[]\r\n                                dataSearch = dataSearch.filter(term => JSON.stringify(dataSearchTemp).includes(JSON.stringify(term)));\r\n                            }           \r\n                        } \r\n                        dataSearch = filterData({dataSearch, filterByInByAssetType, filterByInByStatus, filterByInByPriority});\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearch\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"pendingWO\":\r\n                    // if(searchTermIn.length>3 && searchByIn<=1) {\r\n                    //     let tmp = await this.props.fetchPendingWOData()\r\n                    //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    //     if(filterByInByAssetType.length>0){\r\n                    //         let dataSearched = dataSearch.filter(term => term['description'].includes(searchTerm.toLowerCase()))\r\n                    //         dataSearched = dataSearched.filter(term => term['asset']['assetType']['description'].toLowerCase().includes(filterByInByAssetType.toLowerCase()))\r\n                    //         if(filterByInByPriority.length>0) {\r\n                    //             dataSearched = dataSearched.filter(term => {\r\n                    //                 let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                    //                 return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    //             })\r\n                    //         }\r\n                    //         //  else if(filterByInByStatus.length>0) {\r\n                    //         //     dataSearched = dataSearched.filter(term => {\r\n                    //         //         let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                    //         //         return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    //         //     })                         \r\n                    //         // }\r\n                    //         tmpdata = {\r\n                    //             data: {\r\n                    //                 work_orders: dataSearched\r\n                    //             }\r\n                    //         }                            \r\n                    //     } else {\r\n                    //         let dataSearched = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                    //         tmpdata = {\r\n                    //             data: {\r\n                    //                 work_orders: dataSearched\r\n                    //             }\r\n                    //         } \r\n                    //     }\r\n                    // }else if(searchTermIn.length>3 && searchByIn>1){\r\n                    //     let tmp = await this.props.fetchSearchData()\r\n                    //     let dataSearched = tmp.data?tmp.data.work_orders:[]                        \r\n                    //     if(filterByInByPriority.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    //         })\r\n                    //         tmpdata = {\r\n                    //             data: {\r\n                    //                 work_orders: dataSearched\r\n                    //             }\r\n                    //         }                             \r\n                    //     }\r\n                    //     //  else if(filterByInByStatus.length>0) {\r\n                    //     //     dataSearched = dataSearched.filter(term => {\r\n                    //     //         let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                    //     //         return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    //     //     })\r\n                    //     //     tmpdata = {\r\n                    //     //         data: {\r\n                    //     //             work_orders: dataSearched\r\n                    //     //         }\r\n                    //     //     }                                                      \r\n                    //     // }\r\n                    //     else if(filterByInByAssetType.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    //         })\r\n                    //         tmpdata = {\r\n                    //             data: {\r\n                    //                 work_orders: dataSearched\r\n                    //             }\r\n                    //         }   \r\n                    //     } else {\r\n                    //         tmpdata = await this.props.fetchSearchData()\r\n                    //     }                        \r\n                    // //Default filter by asset type without search                        \r\n                    // }else if(filterByInByAssetType.length>0) {\r\n                    //     let tmp = await this.props.fetchPendingWOData()\r\n                    //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    //     let dataSearched = dataSearch.filter(term => {\r\n                    //         let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                    //         return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    //     })\r\n                    //     if(filterByInByPriority.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    //         })\r\n                    //     }\r\n                    //     //  else if(filterByInByStatus.length>0) {\r\n                    //     //     dataSearched = dataSearched.filter(term => {\r\n                    //     //         let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                    //     //         return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    //     //     })                         \r\n                    //     // }                        \r\n                    //     tmpdata = {\r\n                    //         data: {\r\n                    //             work_orders: dataSearched\r\n                    //         }\r\n                    //     }\r\n                    // //Default filter by status without search   \r\n                    // }\r\n                    // // else if(filterByInByStatus.length>0) {\r\n                    // //     let tmp = await this.props.fetchPendingWOData()\r\n                    // //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    // //     let dataSearched = dataSearch.filter(term => {\r\n                    // //         let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                    // //         return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    // //     })\r\n                    // //     if(filterByInByAssetType.length>0) {\r\n                    // //         dataSearched = dataSearched.filter(term => {\r\n                    // //             let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                    // //             return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    // //         })\r\n                    // //     } else if(filterByInByPriority.length>0) {\r\n                    // //         dataSearched = dataSearched.filter(term => {\r\n                    // //             let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                    // //             return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    // //         })                         \r\n                    // //     }                        \r\n                    // //     tmpdata = {\r\n                    // //         data: {\r\n                    // //             work_orders: dataSearched\r\n                    // //         }\r\n                    // //     }  \r\n                    // // //Default filter by priority without search   \r\n                    // // }\r\n                    // else if(filterByInByPriority.length>0) {\r\n                    //     let tmp = await this.props.fetchPendingWOData()\r\n                    //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    //     let dataSearched = dataSearch.filter(term => {\r\n                    //         let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                    //         return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    //     })\r\n                    //     if(filterByInByAssetType.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    //         })\r\n                    //     }\r\n                    //     //  else if(filterByInByStatus.length>0) {\r\n                    //     //     dataSearched = dataSearched.filter(term => {\r\n                    //     //         let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                    //     //         return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    //     //     })                         \r\n                    //     // }                        \r\n                    //     tmpdata = {\r\n                    //         data: {\r\n                    //             work_orders: dataSearched\r\n                    //         }\r\n                    //     }                                              \r\n                    // }else {\r\n                    //     tmpdata = await this.props.fetchPendingWOData()\r\n                    // }     \r\n                    tmp = await this.props.fetchPendingWOData()\r\n                    dataSearch = tmp.data?tmp.data.work_orders:[]  \r\n                    if(searchTermIn.length>3) {\r\n                        if(searchByIn<=1) {\r\n                            dataSearch = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                        } else {\r\n                            let tmpl = await this.props.fetchSearchData();\r\n                            dataSearchTemp = tmpl.data?tmpl.data.work_orders:[]\r\n                            dataSearch = dataSearch.filter(term => JSON.stringify(dataSearchTemp).includes(JSON.stringify(term)));\r\n                        }           \r\n                    }\r\n                    dataSearch = filterData({dataSearch, filterByInByAssetType, filterByInByPriority});\r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearch\r\n                        }\r\n                    }\r\n                    break;                   \r\n                    case \"assignedWO\":\r\n                    // if(searchTermIn.length>3 && searchByIn<=1) {\r\n                    //     let tmp = await this.props.fetchAssignedToMeWOData()\r\n                    //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    //     if(filterByInByAssetType.length>0){\r\n                    //         let dataSearched = dataSearch.filter(term => term['description'].includes(searchTerm.toLowerCase()))\r\n                    //         dataSearched = dataSearched.filter(term => term['asset']['assetType']['description'].toLowerCase().includes(filterByInByAssetType.toLowerCase()))\r\n                    //         if(filterByInByPriority.length>0) {\r\n                    //             dataSearched = dataSearched.filter(term => {\r\n                    //                 let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                    //                 return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    //             })\r\n                    //         } else if(filterByInByStatus.length>0) {\r\n                    //             dataSearched = dataSearched.filter(term => {\r\n                    //                 let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                    //                 return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    //             })                         \r\n                    //         }\r\n                    //         tmpdata = {\r\n                    //             data: {\r\n                    //                 work_orders: dataSearched\r\n                    //             }\r\n                    //         }                            \r\n                    //     } else {\r\n                    //         let dataSearched = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                    //         tmpdata = {\r\n                    //             data: {\r\n                    //                 work_orders: dataSearched\r\n                    //             }\r\n                    //         } \r\n                    //     }\r\n                    // }else if(searchTermIn.length>3 && searchByIn>1){\r\n                    //     let tmp = await this.props.fetchSearchData()\r\n                    //     let dataSearched = tmp.data?tmp.data.work_orders:[]                        \r\n                    //     if(filterByInByPriority.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    //         })\r\n                    //         tmpdata = {\r\n                    //             data: {\r\n                    //                 work_orders: dataSearched\r\n                    //             }\r\n                    //         }                             \r\n                    //     } else if(filterByInByStatus.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    //         })\r\n                    //         tmpdata = {\r\n                    //             data: {\r\n                    //                 work_orders: dataSearched\r\n                    //             }\r\n                    //         }                                                      \r\n                    //     } else if(filterByInByAssetType.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    //         })\r\n                    //         tmpdata = {\r\n                    //             data: {\r\n                    //                 work_orders: dataSearched\r\n                    //             }\r\n                    //         }   \r\n                    //     } else {\r\n                    //         tmpdata = await this.props.fetchSearchData()\r\n                    //     }                        \r\n                    // //Default filter by asset type without search                        \r\n                    // }else if(filterByInByAssetType.length>0) {\r\n                    //     let tmp = await this.props.fetchAssignedToMeWOData()\r\n                    //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    //     let dataSearched = dataSearch.filter(term => {\r\n                    //         let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                    //         return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    //     })\r\n                    //     if(filterByInByPriority.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    //         })\r\n                    //     } else if(filterByInByStatus.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    //         })                         \r\n                    //     }                        \r\n                    //     tmpdata = {\r\n                    //         data: {\r\n                    //             work_orders: dataSearched\r\n                    //         }\r\n                    //     }\r\n                    // //Default filter by status without search   \r\n                    // }else if(filterByInByStatus.length>0) {\r\n                    //     let tmp = await this.props.fetchAssignedToMeWOData()\r\n                    //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    //     let dataSearched = dataSearch.filter(term => {\r\n                    //         let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                    //         return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    //     })\r\n                    //     if(filterByInByAssetType.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    //         })\r\n                    //     } else if(filterByInByPriority.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    //         })                         \r\n                    //     }                        \r\n                    //     tmpdata = {\r\n                    //         data: {\r\n                    //             work_orders: dataSearched\r\n                    //         }\r\n                    //     }  \r\n                    // //Default filter by priority without search   \r\n                    // }else if(filterByInByPriority.length>0) {\r\n                    //     let tmp = await this.props.fetchAssignedToMeWOData()\r\n                    //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    //     let dataSearched = dataSearch.filter(term => {\r\n                    //         let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                    //         return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    //     })\r\n                    //     if(filterByInByAssetType.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    //         })\r\n                    //     } else if(filterByInByStatus.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    //         })                         \r\n                    //     }                        \r\n                    //     tmpdata = {\r\n                    //         data: {\r\n                    //             work_orders: dataSearched\r\n                    //         }\r\n                    //     }                                              \r\n                    // }else {\r\n                    //     tmpdata = await this.props.fetchAssignedToMeWOData()\r\n                    // }                \r\n                    // break; \r\n                    tmp = await this.props.fetchAssignedToMeWOData()\r\n                    dataSearch = tmp.data?tmp.data.work_orders:[]  \r\n                    if(searchTermIn.length>3) {\r\n                        if(searchByIn<=1) {\r\n                            dataSearch = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                        } else {\r\n                            let tmpl = await this.props.fetchSearchData();\r\n                            dataSearchTemp = tmpl.data?tmpl.data.work_orders:[]\r\n                            dataSearch = dataSearch.filter(term => JSON.stringify(dataSearchTemp).includes(JSON.stringify(term)));\r\n                        }           \r\n                    }\r\n                    dataSearch = filterData({dataSearch, filterByInByAssetType, filterByInByStatus, filterByInByPriority});\r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearch\r\n                        }\r\n                    }\r\n                    break;\r\n                    case \"unassignedWO\":\r\n                    // if(searchTermIn.length>3 && searchByIn<=1) {\r\n                    //     let tmp = await this.props.fetchUnassignedWOData()\r\n                    //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    //     if(filterByInByAssetType.length>0){\r\n                    //         let dataSearched = dataSearch.filter(term => term['description'].includes(searchTerm.toLowerCase()))\r\n                    //         dataSearched = dataSearched.filter(term => term['asset']['assetType']['description'].toLowerCase().includes(filterByInByAssetType.toLowerCase()))\r\n                    //         if(filterByInByPriority.length>0) {\r\n                    //             dataSearched = dataSearched.filter(term => {\r\n                    //                 let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                    //                 return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    //             })\r\n                    //         }\r\n                    //         //  else if(filterByInByStatus.length>0) {\r\n                    //         //     dataSearched = dataSearched.filter(term => {\r\n                    //         //         let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                    //         //         return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    //         //     })                         \r\n                    //         // }\r\n                    //         tmpdata = {\r\n                    //             data: {\r\n                    //                 work_orders: dataSearched\r\n                    //             }\r\n                    //         }                            \r\n                    //     } else {\r\n                    //         let dataSearched = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                    //         tmpdata = {\r\n                    //             data: {\r\n                    //                 work_orders: dataSearched\r\n                    //             }\r\n                    //         } \r\n                    //     }\r\n                    // }else if(searchTermIn.length>3 && searchByIn>1){\r\n                    //     let tmp = await this.props.fetchSearchData()\r\n                    //     let dataSearched = tmp.data?tmp.data.work_orders:[]                        \r\n                    //     if(filterByInByPriority.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    //         })\r\n                    //         tmpdata = {\r\n                    //             data: {\r\n                    //                 work_orders: dataSearched\r\n                    //             }\r\n                    //         }                             \r\n                    //     }\r\n                    //     //  else if(filterByInByStatus.length>0) {\r\n                    //     //     dataSearched = dataSearched.filter(term => {\r\n                    //     //         let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                    //     //         return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    //     //     })\r\n                    //     //     tmpdata = {\r\n                    //     //         data: {\r\n                    //     //             work_orders: dataSearched\r\n                    //     //         }\r\n                    //     //     }                                                      \r\n                    //     // }\r\n                    //     else if(filterByInByAssetType.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    //         })\r\n                    //         tmpdata = {\r\n                    //             data: {\r\n                    //                 work_orders: dataSearched\r\n                    //             }\r\n                    //         }   \r\n                    //     } else {\r\n                    //         tmpdata = await this.props.fetchSearchData()\r\n                    //     }                        \r\n                    // //Default filter by asset type without search                        \r\n                    // }else if(filterByInByAssetType.length>0) {\r\n                    //     let tmp = await this.props.fetchUnassignedWOData()\r\n                    //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    //     let dataSearched = dataSearch.filter(term => {\r\n                    //         let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                    //         return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    //     })\r\n                    //     if(filterByInByPriority.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    //         })\r\n                    //     }\r\n                    //     //  else if(filterByInByStatus.length>0) {\r\n                    //     //     dataSearched = dataSearched.filter(term => {\r\n                    //     //         let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                    //     //         return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    //     //     })                         \r\n                    //     // }                        \r\n                    //     tmpdata = {\r\n                    //         data: {\r\n                    //             work_orders: dataSearched\r\n                    //         }\r\n                    //     }\r\n                    // //Default filter by status without search   \r\n                    // }\r\n                    // // else if(filterByInByStatus.length>0) {\r\n                    // //     let tmp = await this.props.fetchUnassignedWOData()\r\n                    // //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    // //     let dataSearched = dataSearch.filter(term => {\r\n                    // //         let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                    // //         return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    // //     })\r\n                    // //     if(filterByInByAssetType.length>0) {\r\n                    // //         dataSearched = dataSearched.filter(term => {\r\n                    // //             let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                    // //             return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    // //         })\r\n                    // //     } else if(filterByInByPriority.length>0) {\r\n                    // //         dataSearched = dataSearched.filter(term => {\r\n                    // //             let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                    // //             return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    // //         })                         \r\n                    // //     }                        \r\n                    // //     tmpdata = {\r\n                    // //         data: {\r\n                    // //             work_orders: dataSearched\r\n                    // //         }\r\n                    // //     }  \r\n                    // // //Default filter by priority without search   \r\n                    // // }\r\n                    // else if(filterByInByPriority.length>0) {\r\n                    //     let tmp = await this.props.fetchUnassignedWOData()\r\n                    //     let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    //     let dataSearched = dataSearch.filter(term => {\r\n                    //         let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                    //         return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    //     })\r\n                    //     if(filterByInByAssetType.length>0) {\r\n                    //         dataSearched = dataSearched.filter(term => {\r\n                    //             let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                    //             return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    //         })\r\n                    //     }\r\n                    //     //  else if(filterByInByStatus.length>0) {\r\n                    //     //     dataSearched = dataSearched.filter(term => {\r\n                    //     //         let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                    //     //         return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    //     //     })                         \r\n                    //     // }                        \r\n                    //     tmpdata = {\r\n                    //         data: {\r\n                    //             work_orders: dataSearched\r\n                    //         }\r\n                    //     }                                              \r\n                    // }else {\r\n                    //     tmpdata = await this.props.fetchUnassignedWOData()\r\n                    // }  \r\n                    tmp = await this.props.fetchUnassignedWOData()\r\n                    dataSearch = tmp.data?tmp.data.work_orders:[] \r\n                    if(searchTermIn.length>3) {\r\n                        if(searchByIn<=1) {\r\n                            dataSearch = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                        } else {\r\n                            let tmpl = await this.props.fetchSearchData();\r\n                            dataSearchTemp = tmpl.data?tmpl.data.work_orders:[]\r\n                            dataSearch = dataSearch.filter(term => JSON.stringify(dataSearchTemp).includes(JSON.stringify(term)));\r\n                        }\r\n                    } \r\n                    dataSearch = filterData({dataSearch, filterByInByAssetType, filterByInByPriority});\r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearch\r\n                        }\r\n                    }\r\n                    break;                                                       \r\n                    default:\r\n                        tmpdata = await this.props.fetchEmergencyWOData()\r\n                        break;\r\n                }\r\n            }\r\n        \r\n            const handleId = async(dtlsID) => {\r\n                if(this.state.firstLoading === false) {\r\n                    detailsdata = await this.props.fetchDetailsWOData(dtlsID, token)\r\n                    notesdata = await this.props.fetchNotesWOData(dtlsID, token)\r\n                    //serviceProviders = await this.props.fetchServiceProviders(dtlsID, token);\r\n                    // this.sortOrderNotesByDate()\r\n                    attachmentsdata = await this.props.fetchAttachmentsWOData(dtlsID, token)\r\n                    //historydata = await this.props.fetchHistoryWOData(dtlsID, token)\r\n                    warrantydata = await this.props.fetchWarrantyWOData(dtlsID, token)\r\n                }\r\n                this.setState({loadingDetails: false})\r\n            }\r\n            //Change details data\r\n            const handleChangePrevState = (dtlsID) => {\r\n                const id = dtlsID\r\n                handleId(id)\r\n            }\r\n\r\n            // let currentIndex =  tmpdata.data.work_orders.findIndex(this.isCurrent);\r\n            // if(currentIndex === -1) currentIndex = 0\r\n            // this.array_move(tmpdata.data.work_orders, currentIndex, 0)\r\n            this.sortWOByCreatedDate(tmpdata.data.work_orders) \r\n\r\n            const prevSteDtls = prevState.detailsId\r\n            const currentSteDtls = this.state.detailsId\r\n            const tmpDtls = tmpdata.data!==undefined?\r\n                                (tmpdata.data.work_orders!==null?\r\n                                    (tmpdata.data.work_orders[0]!==undefined?\r\n                                        tmpdata.data.work_orders[0]['workOrderId']:\r\n                                        dtlsID):dtlsID):\r\n                                        dtlsID\r\n            tmpDataAmount = tmpdata.data.work_orders!==undefined?tmpdata.data.work_orders.length:0;\r\n            //Choose if details preview it's based on the first response element or the selected by the user when clicks the row\r\n            if( prevSteDtls !== ''){\r\n                if( prevSteDtls !== currentSteDtls ) {\r\n                    this.setState({\r\n                        detailsId: dtlsID,\r\n                        loadingDetails: true\r\n                    }, handleChangePrevState(dtlsID)) \r\n                } else {\r\n                    dtlsID = tmpDtls             \r\n                    this.setState({\r\n                        detailsId: dtlsID,\r\n                    }, handleChangePrevState(dtlsID))    \r\n                }\r\n            }\r\n            \r\n            const prevNoteStatus = prevState.newNoteAvailable\r\n            const currentNoteStatus = this.state.newNoteAvailable\r\n            if( prevNoteStatus !== currentNoteStatus) {\r\n                newNote = await this.props.createNoteWOData(noteDescription, dtlsID, token, userId)\r\n                this.setState({\r\n                    newNote: newNote.data,\r\n                    loadingDetails: true\r\n                }, handleChangePrevState(dtlsID))\r\n            }\r\n\r\n            const prevUpdatedStatus = prevState.updatedStatus\r\n            const currentUpdatedStatus = this.state.updatedStatus\r\n            if( prevUpdatedStatus !== currentUpdatedStatus) {\r\n                console.log(\"USERID\", userId)\r\n                workOrderUpdateResponse = await this.props.updateWOStatus(dtlsID, token, updatedStatus, reassignToVal, userId)\r\n                if(workOrderUpdateResponse) {\r\n                    this.setState({\r\n                        workOrderUpdateResponse: workOrderUpdateResponse,\r\n                        loadingDetails: true\r\n                    }, handleChangePrevState(dtlsID))\r\n                } else {\r\n                    alert(\"Server Error Occured\");\r\n                    this.setState({\r\n                        updatedStatus: ''\r\n                    });\r\n                }\r\n            }\r\n\r\n            // console.log(\"dltsID\", this.state.deta)\r\n            //Normalize state to avoid missing data or state changes\r\n            this.setState({\r\n                detailsId: dtlsID,\r\n                targetId: this.state.targetId,\r\n                loading: false\r\n            }, handleChangePrevState(dtlsID))\r\n        }\r\n    }\r\n    render() {\r\n\r\n        const globalState = {\r\n            dynamicDetails: this.dynamicDetails,\r\n            dynamicData: this.dynamicData,\r\n            handleSearchTerm: this.handleSearchTerm,\r\n            handleSearchBy: this.handleSearchBy,\r\n            handleFilterByAssetType: this.handleFilterByAssetType,\r\n            handleFilterByStatus: this.handleFilterByStatus,\r\n            handleFilterByPriority: this.handleFilterByPriority,\r\n            handleFilterClearAll: this.handleFilterClearAll,\r\n            createNoteWOData: this.createNoteWOData,\r\n            updateWOStatus: this.updateWOStatus,\r\n            handleNoteInput: this.handleNoteInput,\r\n            handleReassignToSelect: this.handleReassignToSelect,\r\n            reassignToVal: this.state.reassignToVal,\r\n            currentDtlsId: this.state.detailsId,\r\n            noteDescription: this.state.noteDescription,\r\n            filterByStateAssetType: this.state.filterByAssetType,\r\n            filterByStateStatus: this.state.filterByStatus,\r\n            filterByStatePriority: this.state.filterByPriority,                        \r\n            searchByState: this.state.searchBy,\r\n            searchTermState: this.state.searchTerm,\r\n        }\r\n        return (\r\n            <GlobalContext.Provider value={globalState}>\r\n                <div className=\"work-orders-container\">\r\n                    <Alert severity=\"warning\" variant=\"filled\">\r\n                        <Link href=\"/admin/WorkOrders\" target=\"_blank\" rel=\"noopener\" color=\"inherit\">\r\n                            <i>Missing Something? Go to the Old Version</i>\r\n                        </Link>\r\n                    </Alert>\r\n                    <Grid className=\"cta-section-component\">\r\n                        <CTASectionComponent \r\n                            ctadata={ctadata}\r\n                            tmpdata={tmpdata}\r\n                            targetdata={trgtID} \r\n                        />\r\n                    </Grid>            \r\n                    <Grid container className=\"content-section\">\r\n                        <Grid item xs={12} md={7} lg={7}>\r\n                            <DataTableComponent\r\n                                tmpdata={tmpdata}\r\n                                loading={this.state.loading}\r\n                                firstLoading={this.state.firstLoading}\r\n                            />\r\n                        </Grid>        \r\n                        <Grid item xs={12} md={5} lg={5}>\r\n                            <WorkOrderDetailsComponent\r\n                                tmpDataAmount={tmpDataAmount}\r\n                                loadingDetails={this.state.loadingDetails}\r\n                                detailsdata={detailsdata}\r\n                                //history={historydata} \r\n                                attachments={attachmentsdata} \r\n                                notes={notesdata}\r\n                                //serviceProviders={serviceProviders}\r\n                                firstLoading={this.state.firstLoading}\r\n                                warranty={warrantydata}\r\n                            />\r\n                        </Grid>  \r\n                    </Grid>  \r\n                </div>   \r\n            </GlobalContext.Provider>                   \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    oauthFetchToken: () => dispatch(oauthFetchToken()),\r\n    fetchCTAsData: () => dispatch(fetchCTAsData(token, userId)),   \r\n    fetchSearchData: () => dispatch(fetchSearchData(searchTerm, searchBy, token, userId)),   \r\n    fetchWarrantyWOData: () => dispatch(fetchWarrantyWOData(dtlsID, token)),   \r\n    fetchPendingWOData: () => dispatch(fetchPendingWOData(token, userId)),\r\n    fetchEmergencyWOData: () => dispatch(fetchEmergencyWOData(token, userId)),\r\n    fetchOpenWOData: () => dispatch(fetchOpenWOData(token, userId)),\r\n    fetchUsersInformation: () => dispatch(fetchUsersInformation(token)),\r\n    fetchDetailsWOData: () => dispatch(fetchDetailsWOData(dtlsID, token)),\r\n    updateWOStatus: () => dispatch(updateWOStatus(dtlsID, token, updatedStatus, reassignToVal, userId)),\r\n    //fetchServiceProviders: () => dispatch(fetchServiceProviders(dtlsID, token, userId)),\r\n    fetchAssignedToMeWOData: () => dispatch(fetchAssignedToMeWOData(token, userId)),\r\n    fetchUnassignedWOData: () => dispatch(fetchUnassignedWOData(token, userId)),\r\n    //fetchHistoryWOData: () => dispatch(fetchHistoryWOData(dtlsID, token)),\r\n    fetchNotesWOData: () => dispatch(fetchNotesWOData(dtlsID, token)),\r\n    createNoteWOData: () => dispatch(createNoteWOData(noteDescription, dtlsID, token, userId)),\r\n    fetchAttachmentsWOData: ()=> dispatch(fetchAttachmentsWOData(dtlsID, token)),\r\n})\r\n\r\n\r\nconst WorkOrdersContainer = connect(mapStateToProps, mapDispatchToProps)(WorkOrdersBuilder)\r\n\r\nexport default WorkOrdersContainer;","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\context\\globalcontext\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\ctasectionreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\oauthtokenreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\emergencyworkordersreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\useraccountdatareducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\pendingworkordersreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderdetailsreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\warrantymodalreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderattachmentsreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workordersnotesreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\advancedsearchreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderunassignedreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderassignedtomereducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workordershistoryreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\oauthtokenactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\warrantymodalactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderattachmentsactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\constants\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workordernotesactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderhistoryactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\advancedsearchactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderdetailsactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\unassignedworkordersactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\assignedtomeworkordersactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\pendingworkordersactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\useraccountdataactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\openworkordersactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\emercencyworkordersactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\ctasectionactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\alertComponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\advancedsearchcomponent\\index.js",["447"],"/**\r\n * Description: Create Advanced Search Component\r\n * Author: Carlos Blanco\r\n * Created: 10/26/2020\r\n * Ticket: ET-237\r\n */\r\n//Basic imports\r\nimport React, {useContext, useState} from 'react';\r\n\r\n//Material UI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { FormControl, TextField, Select, MenuItem, Radio, InputAdornment } from '@material-ui/core';\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n//Context\r\nimport { GlobalContext } from \"../../context/globalcontext\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    search: {\r\n        width: \"70%\",\r\n    },\r\n    menuItem: {\r\n        minWidth: '200px',\r\n        fontSize: '14px',\r\n        padding: '0',\r\n        width: '100%'\r\n    },\r\n    underline: {\r\n        \"&&&:before\": {\r\n            borderBottom: \"none\"\r\n        },\r\n        \"&&:after\": {\r\n            borderBottom: \"none\"\r\n        }\r\n    },\r\n    paper: {\r\n        borderRadius: '20px !important',\r\n        borderTopLeftRadius: 'unset !important',\r\n        marginTop: '5px',\r\n        // marginTop: '17px',\r\n        padding: '15px',\r\n        boxShadow: '0px 4px 10px 1px #888888',\r\n        ul: {\r\n            padding: 'unset'\r\n        }\r\n    },\r\n    'input': {\r\n        '&::placeholder': {\r\n            color: '#444444',\r\n            fontSize: '18px',\r\n            fontFamily: 'SfUiDisplay'\r\n        }\r\n    },\r\n}));\r\n\r\nconst advancedSearchFields = [\"Work Order ID\", \"Service Provider\" ,\"Asset Type\", \"Problem Type\", \"Trade Type\", \"Category Type\"]\r\n\r\nconst AdvancedSearchComponent = () => {\r\n    const [searchBox, setSearchBox] = useState(false);\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n    let searchFunc = useContext(GlobalContext)\r\n    let searchTerm = searchFunc.handleSearchTerm \r\n    let searchBy = searchFunc.handleSearchBy\r\n    let searchByState = searchFunc.searchByState\r\n    let searchTermState = searchFunc.searchTermState\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={`search-form ${searchBox?'rounded':''}`}>\r\n            <FormControl className={`advanced ${searchBox?'opened':''}`}>\r\n                <Select\r\n                    labelId=\"advanced-select-filled-label\"\r\n                    id=\"advanced-select-filled-label\"\r\n                    className={`search-box ${searchBox?'opened':''}`}\r\n                    onOpen={() => setSearchBox(true)}\r\n                    onClose={() => setSearchBox(false)}\r\n                    onChange={searchBy}\r\n                    value={searchByState}\r\n                    renderValue={(value) => advancedSearchFields[value-1]}\r\n                    MenuProps = {{\r\n                        anchorOrigin: { vertical: \"bottom\", horizontal: \"left\" },\r\n                        transformOrigin: { vertical: \"top\",horizontal: \"left\" },\r\n                        getContentAnchorEl: null,\r\n                        classes: {\r\n                            paper: classes.paper\r\n                        }\r\n                    }}\r\n                    disableUnderline\r\n                >\r\n                    <MenuItem className={classes.menuItem} value=\"\" disabled><b>Searched by:</b></MenuItem>\r\n                    <MenuItem className={classes.menuItem} value={1}><Radio color=\"primary\" checked={searchByState===1} />{advancedSearchFields[0]}</MenuItem>\r\n                    <MenuItem className={classes.menuItem} value={2}><Radio color=\"primary\" checked={searchByState===2} />{advancedSearchFields[1]}</MenuItem>\r\n                    <MenuItem className={classes.menuItem} value={3}><Radio color=\"primary\" checked={searchByState===3} />{advancedSearchFields[2]}</MenuItem>\r\n                    <MenuItem className={classes.menuItem} value={4}><Radio color=\"primary\" checked={searchByState===4} />{advancedSearchFields[3]}</MenuItem>\r\n                    <MenuItem className={classes.menuItem} value={5}><Radio color=\"primary\" checked={searchByState===5} />{advancedSearchFields[4]}</MenuItem>\r\n                    <MenuItem className={classes.menuItem} value={6}><Radio color=\"primary\" checked={searchByState===6} />{advancedSearchFields[5]}</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n            <FormControl className={classes.search}>           \r\n                <TextField \r\n                    placeholder={`Search by ${advancedSearchFields[searchByState-1]}...`}\r\n                    id=\"search-input-filled-label\"\r\n                    aria-describedby=\"search\" \r\n                    type=\"search\" \r\n                    fullWidth={true} \r\n                    value={searchValue}\r\n                    onChange={(event) => {\r\n                        setSearchValue(event.target.value);\r\n                        if(event.target.value.length>3||event.target.value.length===0) {\r\n                            searchTerm(event); \r\n                        }\r\n                    }}\r\n                    InputProps={{ classes: {\r\n                                    underline: classes.underline\r\n                                },\r\n                                  endAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <SearchIcon />\r\n                                    </InputAdornment>\r\n                    ) }}\r\n                />\r\n            </FormControl>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(AdvancedSearchComponent);","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\index.js",["448"],"/**\r\n * Description: Create Modal Component\r\n * Author: Carlos Blanco\r\n * Created: 9/18/2020\r\n * Ticket: ET-255\r\n */\r\n//Basic imports\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\n\r\n//Material UI\r\nimport { Button, Divider } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n//Date format\r\nimport Moment from 'react-moment';\r\n\r\n//Helpers\r\nimport {\r\n    getModalStyle\r\n} from './helpers'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: \"50%\",\r\n        '@media (max-width: 600px)': {\r\n            width: \"80%\",\r\n            height: \"100%\",\r\n        },\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    warrantyPaper: {\r\n        height: \"100%\",\r\n        overflow:'scroll',\r\n        overflowX:'hidden',\r\n    },\r\n    regularPaper: {\r\n        height: \"50%\",\r\n        overflow:'scroll',\r\n        overflowX:'hidden',\r\n    },\r\n    button: {\r\n        padding: \"0px 5px\",\r\n        textTransform: \"capitalize\",\r\n        marginTop: \"5px\"\r\n    },\r\n    warranty: {\r\n        // float: \"right\",\r\n        // width: \"75%\",\r\n        // marginTop: \"-30px\",      \r\n    },\r\n    date: {\r\n        fontWeight: \"800\",\r\n        color: \"#E60042\"\r\n    },\r\n    pad: {\r\n        paddingLeft: \"20px\"\r\n    }\r\n}));\r\n\r\nconst ModalComponent = ({title, data, type}) => {\r\n    const classes = useStyles();\r\n    let ifWarranty =  type===\"warranty\"?classes.warranty:\"\"\r\n    let ifWarrantyPaper =  type===\"warranty\"?classes.warrantyPaper:classes.regularPaper\r\n    // getModalStyle is not a pure function, we roll the style only on the first render\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [open, setOpen] = React.useState(false);\r\n    \r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    //Button variations\r\n    const buttonWarranty = (\r\n        <Button variant=\"text\" color=\"secondary\" onClick={handleOpen} className={classes.button}>\r\n            <span className=\"icon_warranty\"></span><strong>{title}</strong>\r\n        </Button>        \r\n    ) \r\n    const buttonRegular = (\r\n        <Button variant=\"outlined\" color=\"secondary\" onClick={handleOpen} className={classes.button}>\r\n            More details\r\n        </Button>\r\n    )\r\n\r\n    const buttonAttachments = (\r\n        <Button variant=\"outlined\" color=\"secondary\" onClick={handleOpen} className={classes.button}>\r\n            More details\r\n        </Button>\r\n    )  \r\n    \r\n    //vars\r\n    let describer\r\n    let description\r\n    let createdDate\r\n    let updatedDate\r\n    let company\r\n    let firstName\r\n    let lastName\r\n    let typeOf\r\n    let historyNote\r\n    let phone\r\n    let imageFile\r\n    let imageTitle\r\n    let referenceID\r\n    let assetID\r\n    let warrantyPeriod1\r\n    let warrantyPeriod2\r\n    let warrantyPeriod3\r\n    let warrantyPeriod4\r\n    let warrantyExpiryDate\r\n    let warrantyStartFromDate\r\n    let warrantyNte\r\n    let warrantyStatusId\r\n    let warranty1typeId\r\n    let warranty2typeId\r\n    let warranty3typeId\r\n    let warranty4typeId\r\n    let warranty1type\r\n    let warranty2type\r\n    let warranty3type\r\n    let warranty4type\r\n    let warranty1typeStatus\r\n    let warranty2typeStatus\r\n    let warranty3typeStatus\r\n    let warranty4typeStatus\r\n    let componentWarranties\r\n\r\n    const Empty = \"\"\r\n    if(type===\"document\") {\r\n        description = data['type']?data['type']['description']:Empty\r\n        typeOf = data['type']?data['type']['type']:Empty\r\n        createdDate = data['createdAt']?data['createdAt']:Empty  \r\n        updatedDate = data['updatedAt']?data['updatedAt']:Empty  \r\n        imageFile = data['fileName']?data['fileName']:Empty  \r\n        imageTitle = data['documentId']?data['documentId']:Empty   \r\n        referenceID = data['referenceId']?data['referenceId']:Empty   \r\n        createdDate = data['dateCreated']?data['dateCreated']:Empty\r\n        updatedDate = data['dateUpdated']?data['dateUpdated']:Empty\r\n    } else if (type===\"history\") {\r\n        phone = data['user']?data['user']['phoneNumber']:Empty  \r\n        historyNote = data['note']?data['note']:Empty\r\n        updatedDate = data['updatedDate']?data['updatedDate']:Empty\r\n        company = data['user']?data['companyName']:Empty\r\n    } else if (type===\"warranty\") { \r\n        assetID = data['warranty']?data['warranty']['assetId']:Empty\r\n        warrantyPeriod1 = data['warranty']?data['warranty']['warrantyPeriod1']:Empty\r\n        warrantyPeriod2 = data['warranty']?data['warranty']['warrantyPeriod2']:Empty\r\n        warrantyPeriod3 = data['warranty']?data['warranty']['warrantyPeriod3']:Empty\r\n        warrantyPeriod4 = data['warranty']?data['warranty']['warrantyPeriod4']:Empty\r\n        warrantyExpiryDate = data['warranty']?data['warranty']['warrantyExpiryDate']:Empty\r\n        warrantyStartFromDate = data['warranty']?data['warranty']['warrantyStartFromDate']:Empty\r\n        warrantyNte = data['warranty']?data['warranty']['warrantyNte']:Empty\r\n        warrantyStatusId = data['warranty']?data['warranty']['warrantyStatusId']:Empty\r\n        warranty1typeId = data['warranty']?(data['warranty']['warranty1']?data['warranty']['warranty1']['warrantyTypeId']:Empty):Empty\r\n        warranty2typeId = data['warranty']?(data['warranty']['warranty2']?data['warranty']['warranty1']['warrantyTypeId']:Empty):Empty\r\n        warranty3typeId = data['warranty']?(data['warranty']['warranty3']?data['warranty']['warranty1']['warrantyTypeId']:Empty):Empty\r\n        warranty4typeId = data['warranty']?(data['warranty']['warranty4']?data['warranty']['warranty1']['warrantyTypeId']:Empty):Empty\r\n        warranty1type = data['warranty']?(data['warranty']['warranty1']?data['warranty']['warranty1']['warrantyType']:Empty):Empty\r\n        warranty2type = data['warranty']?(data['warranty']['warranty2']?data['warranty']['warranty2']['warrantyType']:Empty):Empty\r\n        warranty3type = data['warranty']?(data['warranty']['warranty3']?data['warranty']['warranty3']['warrantyType']:Empty):Empty\r\n        warranty4type = data['warranty']?(data['warranty']['warranty4']?data['warranty']['warranty4']['warrantyType']:Empty):Empty\r\n        warranty1typeStatus = data['warranty']?(data['warranty']['warranty1']?data['warranty']['warranty1']['status']:Empty):Empty\r\n        warranty2typeStatus = data['warranty']?(data['warranty']['warranty2']?data['warranty']['warranty2']['status']:Empty):Empty\r\n        warranty3typeStatus = data['warranty']?(data['warranty']['warranty3']?data['warranty']['warranty3']['status']:Empty):Empty\r\n        warranty4typeStatus = data['warranty']?(data['warranty']['warranty4']?data['warranty']['warranty4']['status']:Empty):Empty  \r\n        componentWarranties =  data['warranty']?data['warranty']['componentWarranties']:Empty             \r\n    } else {\r\n        if (data['wonNote']) {\r\n            describer = \"Work Order Note\"\r\n            description = data['wonNote']?data['wonNote']:Empty\r\n            createdDate = data['createdAt']?data['createdAt']:Empty\r\n            updatedDate = data['updatedAt']?data['updatedAt']:Empty\r\n            company = data['user']['companyName']?data['user']['companyName']:Empty\r\n            firstName = data['user']['firstName']?data['user']['firstName']:Empty\r\n            lastName = data['user']['lastName']?data['user']['lastName']:Empty\r\n        } else if (data['pnote']) {\r\n            describer = \"Proposal Note\"\r\n            description = data['pnote']?data['pnote']:Empty\r\n            createdDate = data['dateCreated']?data['dateCreated']:Empty\r\n            updatedDate = data['dateUpdated']?data['dateUpdated']:Empty\r\n            company = data['user']['companyName']?data['user']['companyName']:Empty\r\n            firstName = data['user']['firstName']?data['user']['firstName']:Empty\r\n            lastName = data['user']['lastName']?data['user']['lastName']:Empty       \r\n        } else {\r\n            describer = \"Invoice Note\"\r\n            description = data['invNote']?data['invNote']:Empty  \r\n            createdDate = data['createdAt']?data['createdAt']:Empty  \r\n            updatedDate = data['updatedAt']?data['updatedAt']:Empty  \r\n            company = data['user']?data['user']['companyName']:Empty  \r\n            firstName = data['user']?data['user']['firstName']:Empty   \r\n            lastName = data['user']?data['user']['lastName']:Empty  \r\n        }\r\n    }\r\n\r\n    //Notes\r\n    const bodyNotes = (\r\n        <Grid style={modalStyle} className={classes.paper}>\r\n            <h2 id=\"simple-modal-title\">{describer}</h2>\r\n                <p id=\"simple-modal-description\">\r\n                    {description}\r\n                </p>\r\n                <p><strong>Company: </strong>{company}</p>\r\n                <p><strong>Name: </strong>{firstName} {lastName}</p>  \r\n                <p><strong>Created At: </strong><span className={classes.date}><Moment format=\"MMMM D, YYYY hh:mm a\">{createdDate}</Moment></span></p>\r\n                <p><strong>Updated At: </strong><span className={classes.date}><Moment format=\"MMMM D, YYYY hh:mm a\">{updatedDate}</Moment></span></p>                              \r\n        </Grid>\r\n    )\r\n    \r\n    //Attachments\r\n    const imageURL = \"https://ecotrak-documents-production.s3.us-east-2.amazonaws.com/img/uploads/photos/\"\r\n    const bodyAttachments = (\r\n        <Grid style={modalStyle} className={classes.paper}>\r\n            <h2 id=\"simple-modal-title\">{description}</h2>\r\n            <img src={`${imageURL}${imageFile}`} alt={imageTitle}/>\r\n            <p><strong>Reference ID: </strong>{referenceID}</p>\r\n            <p><strong>Type: </strong>{typeOf}</p>  \r\n            <p><strong>Created At: </strong><span className={classes.date}><Moment format=\"MMMM D, YYYY hh:mm a\">{createdDate}</Moment></span></p>\r\n            <p><strong>Updated At: </strong><span className={classes.date}><Moment format=\"MMMM D, YYYY hh:mm a\">{updatedDate}</Moment></span></p>               \r\n        </Grid>\r\n    )  \r\n    \r\n    const linkButton = (\r\n        <Button onClick={() => {\r\n            let url = `${imageURL}${imageFile}`;\r\n            let img = '<img src=\"'+url+'\" alt=\"'+imageTitle+'\">';\r\n            let m_title = \"Attachments\";\r\n            let header = '<html><head><title>' + m_title + '</title></head><body height=\"100%\" width=\"100%\">'\r\n            let popup = window.open();\r\n            popup.document.write(header);\r\n            popup.document.write(img);\r\n            popup.document.write('</body></html>');                     \r\n            popup.document.close();\r\n        }} variant=\"outlined\" color=\"secondary\" className={classes.button}>More Details</Button>\r\n        \r\n    )\r\n    \r\n    //History\r\n    const bodyHistory = (\r\n        <Grid style={modalStyle} className={classes.paper}>\r\n            <h2 id=\"simple-modal-title\">History</h2>\r\n            <p><strong>Phone: </strong>{phone}</p>\r\n            <p><strong>Note: </strong>{historyNote}</p>  \r\n            <p><strong>Company: </strong><span className={classes.date}><Moment format=\"MMMM D, YYYY hh:mm a\">{company}</Moment></span></p>\r\n            <p><strong>Updated At: </strong><span className={classes.date}><Moment format=\"MMMM D, YYYY hh:mm a\">{updatedDate}</Moment></span></p>               \r\n        </Grid>\r\n    )\r\n\r\n    //Warranty\r\n    //Converting object into array in order to use map()\r\n    const componentWarrantiesArray = componentWarranties?Object.entries(componentWarranties):[];\r\n    const bodyWarranty = (\r\n        <Grid container style={modalStyle} className={`${classes.paper} ${ifWarrantyPaper}`}>\r\n            <Grid item xs={12} md={12} lg={6}>\r\n                <h2 id=\"simple-modal-title\">Warranty</h2> \r\n                <p><strong>Asset ID: </strong>{assetID}</p>\r\n                <p><strong>Warranty Expiry Date: </strong><span className={classes.date}><Moment format=\"MMMM D, YYYY hh:mm a\">{warrantyExpiryDate}</Moment></span></p>     \r\n                <p><strong>warranty Start from Date: </strong>{warrantyStartFromDate}</p>  \r\n                <p><strong>Warranty Nte: </strong>$ {warrantyNte}</p>  \r\n                <p><strong>Warranty Status Id: </strong>{warrantyStatusId}</p>\r\n                <Divider />\r\n                <p><strong>Warranty Period 1: </strong>{warrantyPeriod1}</p>\r\n                <p><strong>Warranty Type: </strong>{warranty1type}</p>\r\n                <p><strong>Warranty Type Id: </strong>{warranty1typeId}</p>\r\n                <p><strong>Warranty Status: </strong>{warranty1typeStatus}</p>\r\n                <Divider/>\r\n                <p><strong>Warranty Period 2: </strong>{warrantyPeriod2}</p> \r\n                <p><strong>Warranty Type: </strong>{warranty2type}</p>\r\n                <p><strong>Warranty Type Id: </strong>{warranty2typeId}</p>\r\n                <p><strong>Warranty Status: </strong>{warranty2typeStatus}</p>                   \r\n                <Divider/>\r\n                <p><strong>Warranty Period 3: </strong>{warrantyPeriod3}</p>\r\n                <p><strong>Warranty Type: </strong>{warranty3type}</p>\r\n                <p><strong>Warranty Type Id: </strong>{warranty3typeId}</p>\r\n                <p><strong>Warranty Status: </strong>{warranty3typeStatus}</p>                   \r\n                <Divider/>\r\n                <p><strong>Warranty Period 4: </strong>{warrantyPeriod4}</p>\r\n                <p><strong>Warranty Type: </strong>{warranty4type}</p>\r\n                <p><strong>Warranty Type Id: </strong>{warranty4typeId}</p>\r\n                <p><strong>Warranty Status: </strong>{warranty4typeStatus}</p>\r\n            </Grid>\r\n            <Grid item xs={12} md={12} lg={6} className={classes.pad}>\r\n                <h2 id=\"simple-modal-title\">Component Warranties</h2>                   \r\n                {componentWarrantiesArray.map((item) => {\r\n                    return (\r\n                        <Grid key={item[0]}>\r\n                            <p><strong>Warranty Period: </strong>{item[1]['warrantyPeriodType']}</p> \r\n                            <p><strong>Warranty Period Type: </strong>{item[1]['warrantyPeriodType']}</p> \r\n                            <p><strong>Component Warranty Id: </strong>{item[1]['componentWarrantyId']}</p> \r\n                            <p><strong>Invoice Id: </strong>{item[1]['invoiceId']}</p> \r\n                            <p><strong>Asset Id: </strong>{item[1]['assetId']}</p> \r\n                            <p><strong>Service Provider Id: </strong>{item[1]['serviceProviderId']}</p> \r\n                            <p><strong>Asset Failure TypeId: </strong>{item[1]['assetFailureTypeId']}</p> \r\n                            <p><strong>Status: </strong>{item[1]['status']}</p>\r\n                            <p><strong>Date Created: </strong><span className={classes.date}><Moment format=\"MMMM D, YYYY hh:mm a\">{item[1]['dateCreated']}</Moment></span></p> \r\n                            <p><strong>Date Updated: </strong><span className={classes.date}><Moment format=\"MMMM D, YYYY hh:mm a\">{item[1]['dateUpdated']}</Moment></span></p>                        \r\n                            <Divider />                       \r\n                        </Grid>\r\n                    )\r\n                })}\r\n            </Grid>\r\n        </Grid>        \r\n    )\r\n\r\n    //Check for types to assign values to \"body\" layouts   \r\n    let button\r\n    let body\r\n    if (type===\"warranty\") {\r\n        body = bodyWarranty\r\n        button = buttonWarranty\r\n    } else if (type===\"document\") {\r\n        body = bodyAttachments\r\n        button = linkButton\r\n    } else if (type===\"history\") {\r\n        body = bodyHistory\r\n        button = buttonRegular\r\n    } else {\r\n        body = bodyNotes\r\n        button = buttonRegular\r\n    }\r\n    return (\r\n    <Grid className={ifWarranty}>\r\n        {button}        \r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"         \r\n        >\r\n        {body}\r\n        </Modal>\r\n    </Grid>\r\n    );\r\n}\r\n\r\nexport default React.memo(ModalComponent)\r\n","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\index.js",["449"],"/**\r\n * Description: Create Tab View Component\r\n * Author: Carlos Blanco\r\n * Created: 9/10/2020\r\n * Ticket: ET-256\r\n */\r\n\r\n//Basic Imports\r\nimport React, {useState} from 'react';\r\n//import PropTypes from 'prop-types';\r\n\r\n//Material UI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n//Common Components\r\nimport CommonTable from './common'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginTop: \"25px\"\r\n    },\r\n    tabNav: {\r\n        backgroundColor: \"transparent\",\r\n        color: \"#444444\",\r\n        boxShadow: \"none\"\r\n    },\r\n    tabParent: {\r\n        backgroundColor: \"#E8E8E8\",\r\n        fontWeight: 800,\r\n        color: \"#0072CE\",\r\n        marginRight: \"5px\",\r\n        textTransform: \"capitalize\"\r\n    }  \r\n}));\r\n\r\nconst TabPanel = (props) => {\r\n    const { children, value, index, ...other } = props;\r\n    return (\r\n        <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n        >\r\n        {value === index && (\r\n            <Box p={3}>\r\n                {children}\r\n            </Box>\r\n        )}\r\n        </div>\r\n    );\r\n}\r\nconst a11yProps = (index) => {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst TabsComponent = ({history, attachments, notes}) => { \r\n    let infotab = true\r\n    //Counters\r\n    let historyCount = history?history.data.work_order_histories:[]\r\n    historyCount = historyCount.length\r\n    let attachmentsCount = attachments?attachments.data.documents:[]\r\n    attachmentsCount = attachmentsCount.length\r\n    \r\n    let notesCount_Workorders = notes?notes.data.workOrderNotes:[]\r\n    notesCount_Workorders = notesCount_Workorders?notesCount_Workorders.length:0\r\n    let notesCount_Proposal = notes?notes.data.proposalNotes:[]\r\n    notesCount_Proposal = notesCount_Proposal?notesCount_Proposal.length:0\r\n    let notesCount_Invoices = notes?notes.data.invoiceNotes:[]\r\n    notesCount_Invoices = notesCount_Invoices?notesCount_Invoices.length:0 \r\n    let notesCount = notesCount_Workorders + notesCount_Proposal + notesCount_Invoices\r\n    \r\n\r\n    //Loading custom styles Material UI\r\n    const classes = useStyles();\r\n    //Setting values for the tabs\r\n    const [value, setValue] = useState(0);\r\n    //Handle data change\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <div className={`${classes.root} work-order-details-component`}>\r\n                <AppBar position=\"static\" className={classes.tabNav}>\r\n                    <Tabs value={value} onChange={handleChange} aria-label=\"tabs\" className={'tab-list'} TabIndicatorProps={{style: {background:'#0072CE'}}}>\r\n                        <Tab label={`Notes (${notesCount})`} {...a11yProps(0)} className={classes.tabParent}/>\r\n                        <Tab label={`Attachments (${attachmentsCount})`} {...a11yProps(1)} className={classes.tabParent} />\r\n                        {/* <Tab label={`History (${historyCount})`} {...a11yProps(2)} className={classes.tabParent} /> */}\r\n                    </Tabs>\r\n                </AppBar>\r\n                <TabPanel value={value} index={0} className={'tab-panel'}>\r\n                    <CommonTable tmpdata={notes} infotab={infotab}></CommonTable>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={1} className={'tab-panel'}>\r\n                    <CommonTable tmpdata={attachments}></CommonTable>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={2} className={'tab-panel'}>\r\n                    <CommonTable tmpdata={history}></CommonTable>\r\n                </TabPanel>     \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(TabsComponent);","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\initialstate\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\helpers\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\common\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbypriority\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbystatus\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbyassettype\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\helpers\\getmodalstyle\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderprioritylayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderstatuslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\ctasectionlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderregularrowlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\featuredctalayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rowbuilderlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\reactwindowtablelayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\tablecolumnslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderimagelayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rendersingleitemlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\locationdetailslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rendermultiitemlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\enhanceddetailslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\boxeddetailslayout\\index.js",["450","451"],"//Basic imports\r\nimport React from 'react';\r\nimport Moment from 'react-moment';\r\n\r\n//Material UI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography, Link } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    text: {\r\n        fontSize: \"14px\",\r\n        lineHeight: \"25px\"\r\n    },\r\n    etaSection: {\r\n        border: \"1px solid #cccccc\",\r\n        borderRadius: \"5px\",\r\n        padding: \"10px\"\r\n    },  \r\n    date: {\r\n        fontWeight: 600,\r\n        color: \"#F20050\",\r\n    }  \r\n}));\r\n\r\nexport const BoxedDetails = ({proposalId, invoiceId, currentEta, createdDate, serviceProvider, serviceProviderLast, proposalStatus, assignTo, invoiceStatus, nullVal}) => {\r\n    const api_url = '/admin/';\r\n    const classes = useStyles()\r\n    const smallSize = 12\r\n    const mediumSize = 6\r\n    let assignToDesc = assignTo!==null?`${assignTo.firstName} ${assignTo.lastName} / ${assignTo.companyName}`:nullVal\r\n    return (\r\n        <Grid item xs={smallSize} md={12} lg={7} className={classes.etaSection}>\r\n            <Grid container>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}><strong>Current ETA: </strong></Typography>\r\n                </Grid>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}><span className={classes.date}><Moment format=\"MMMM D, YYYY hh:mm a\">{currentEta!==null?currentEta:nullVal}</Moment></span></Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}><strong>Created Date: </strong></Typography>\r\n                </Grid>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}><span className={classes.date}><Moment format=\"MMMM D, YYYY hh:mm a\">{createdDate!==null?createdDate:nullVal}</Moment></span></Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}><strong>Service Provider: </strong></Typography>\r\n                </Grid>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}>{serviceProvider!==null?serviceProvider:nullVal} {serviceProviderLast!==null?serviceProviderLast:nullVal}</Typography>\r\n                </Grid>\r\n            </Grid>            \r\n            <Grid container>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}><strong>Assigned To: </strong></Typography>\r\n                </Grid>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}>{assignToDesc!==null?assignToDesc:nullVal}</Typography>\r\n                </Grid>\r\n            </Grid>     \r\n            <Grid container>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}><strong>Proposal Status: </strong></Typography>                    \r\n                </Grid>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    {/* <Link href={`${api_url}Proposals/proposal_details/${proposalId}`}> */}\r\n                    <Typography className={classes.text}>{proposalStatus!==null?proposalStatus:nullVal}</Typography>\r\n                    {/* </Link> */}\r\n                </Grid>               \r\n            </Grid>                    \r\n            <Grid container>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}><strong>Invoice Status: </strong></Typography>                    \r\n                </Grid>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    {/* <Link href={`${api_url}Invoices/details/${invoiceId}`}> */}\r\n                    <Typography className={classes.text}>{invoiceStatus!==null?invoiceStatus:nullVal}</Typography>\r\n                    {/* </Link> */}\r\n                </Grid>                              \r\n            </Grid>             \r\n        </Grid>\r\n    )\r\n}","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\linkactionslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\mainactionslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\detailsimagelayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\workorderdesriptionclayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\detailslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\maindetailslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\helpers\\rendernotnull\\index.js",["452"],"//Basic imports\r\nimport React from 'react';\r\n\r\n//Material UI\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n//Layouts\r\nimport {\r\n    DetailsImageLayout,\r\n    MainDetails,\r\n    MainActions,\r\n    LinkActions,\r\n    WorkOrderDescription,\r\n    EnhancedDetails,\r\n    BoxedDetails,\r\n    LocationDetails\r\n} from '../../layouts'\r\n\r\n//Components\r\nimport { \r\n    TabsComponent,\r\n    //ModalComponent\r\n} from '../../../../components'\r\n\r\nexport const RenderNotNull = ({detailsdata, history, attachments, notes, warranty, serviceProviders}) => {   \r\n    //In null case\r\n    const nullVal = null;    \r\n    //Image Section\r\n    let image\r\n    //Store data to display in new array\r\n    let assetName\r\n    let assetId\r\n    let workOrderId\r\n    let woType\r\n    let manufacturer\r\n    let model\r\n    let serial\r\n    let assetType\r\n    let warrantyLabel\r\n    //Enhanced Section\r\n    let id\r\n    let description\r\n    let status\r\n    let priority\r\n    let tradeType\r\n    let problemType\r\n    let categoryType\r\n    let nte\r\n    let raisedNte\r\n    //Border Section\r\n    let currentEta\r\n    let createdDate\r\n    let serviceProvider\r\n    let assignTo\r\n    let invoiceStatus\r\n    let invoiceStatusDesc\r\n    //Location Section\r\n    let locationAddress\r\n    let location\r\n    let locationPhone\r\n    //Check PM\r\n    let ifPM\r\n    let proposalStatus\r\n    let proposalId    \r\n    let invoiceId\r\n    let serviceProviderLast\r\n    \r\n    let isAvailable\r\n\r\n    if(detailsdata!==undefined){\r\n        //If is a PM\r\n        if(detailsdata.data.work_order===undefined) {\r\n            isAvailable = true\r\n        } else {\r\n\r\n            if(detailsdata.data.work_order.asset!==nullVal) {\r\n                ifPM = false\r\n            } else {\r\n                ifPM = true\r\n            }\r\n            //Image Section\r\n            if(detailsdata.data.work_order.asset!==nullVal) {\r\n                let pre_image = detailsdata.data.work_order.asset.assetImage\r\n                image = pre_image[0]!==undefined?pre_image[0]['fileName']:nullVal;\r\n            }         \r\n            //Short Detail Section\r\n            if(detailsdata.data.work_order.asset!==nullVal){\r\n                let pre_assetName = detailsdata.data.work_order.asset\r\n                assetName = pre_assetName!==nullVal?detailsdata.data.work_order.asset.name:nullVal;\r\n                assetId = pre_assetName!==nullVal?detailsdata.data.work_order.asset.id:nullVal;\r\n            }        \r\n            if(detailsdata.data.work_order!==nullVal){\r\n                workOrderId = detailsdata.data.work_order.id!==nullVal?detailsdata.data.work_order.id:nullVal;\r\n            }          \r\n            woType = detailsdata.data.work_order.asset!==nullVal?detailsdata.data.work_order.woType:nullVal;\r\n            if(detailsdata.data.work_order.asset!==nullVal){\r\n                let pre_manufacturer = detailsdata.data.work_order.asset.manufacturer\r\n                manufacturer = pre_manufacturer!==nullVal?detailsdata.data.work_order.asset.manufacturer.companyName:nullVal;\r\n            }\r\n            model = detailsdata.data.work_order.asset!==nullVal?detailsdata.data.work_order.asset.modelNumber:nullVal;\r\n            serial = detailsdata.data.work_order.asset!==nullVal?detailsdata.data.work_order.asset.serialNumber:nullVal;\r\n            assetType = detailsdata.data.work_order.assetType!==nullVal?detailsdata.data.work_order.assetType.name:nullVal;\r\n            warrantyLabel = detailsdata.data.work_order.asset!==nullVal?detailsdata.data.work_order.warrantyAvailable:nullVal;\r\n            //Enhanced Section\r\n            id = detailsdata.data.work_order.id!==nullVal?detailsdata.data.work_order.id:nullVal;\r\n            description = detailsdata.data.work_order.description!==nullVal?detailsdata.data.work_order.description:nullVal;\r\n            status = detailsdata.data.work_order.workOrderStatus!==nullVal?detailsdata.data.work_order.workOrderStatus:nullVal;\r\n            priority = detailsdata.data.work_order.priority!==nullVal?detailsdata.data.work_order.priority.name:nullVal;\r\n            tradeType = detailsdata.data.work_order.tradeType!==nullVal?detailsdata.data.work_order.tradeType:nullVal;\r\n            problemType = detailsdata.data.work_order.problemType!==nullVal?detailsdata.data.work_order.problemType.name:nullVal;\r\n            categoryType = detailsdata.data.work_order.categoryType!==nullVal?detailsdata.data.work_order.categoryType.name:nullVal;\r\n            nte = detailsdata.data.work_order.nte!==nullVal?detailsdata.data.work_order.nte:nullVal;\r\n            raisedNte = detailsdata.data.work_order.raisedNte!==nullVal?detailsdata.data.work_order.raisedNte:nullVal;\r\n            if(detailsdata.data.work_order.proposal!==nullVal){\r\n                let pre_proposalStatus = detailsdata.data.work_order.proposal.proposalStatus\r\n                proposalStatus = pre_proposalStatus!==nullVal?detailsdata.data.work_order.proposal.proposalStatus.description:nullVal;\r\n                proposalId = detailsdata.data.work_order.proposal.proposalId\r\n            }  \r\n            assignTo = detailsdata.data.work_order.assignTo!==nullVal?detailsdata.data.work_order.assignTo.user:nullVal;   \r\n            //Bordered Section \r\n            invoiceStatus = detailsdata.data.work_order.invoice.length!==0?detailsdata.data.work_order.invoice.reduce((acc, crr, idx)=> acc+(idx===0?'':', ')+crr.invoiceStatusDesc.description, ''):nullVal;\r\n            invoiceId = detailsdata.data.work_order.invoice.length!==0?detailsdata.data.work_order.invoice[0].invoiceId:nullVal;\r\n            serviceProvider = detailsdata.data.work_order.serviceProviderProfile!==nullVal?detailsdata.data.work_order.serviceProviderProfile.firstName:nullVal;\r\n            serviceProviderLast = detailsdata.data.work_order.serviceProviderProfile!==nullVal?detailsdata.data.work_order.serviceProviderProfile.lastName:nullVal;\r\n            currentEta = detailsdata.data.work_order.currentEta!==nullVal?detailsdata.data.work_order.currentEta:nullVal;\r\n            createdDate = detailsdata.data.work_order.dateCreated!==nullVal?detailsdata.data.work_order.dateCreated:nullVal;\r\n            //Location Section\r\n            locationAddress = detailsdata.data.work_order.location!==nullVal?detailsdata.data.work_order.location.address1:nullVal;\r\n            location = detailsdata.data.work_order.location!==nullVal?detailsdata.data.work_order.location.name:nullVal;\r\n            locationPhone = detailsdata.data.work_order.location!==nullVal?detailsdata.data.work_order.location.phone1:nullVal;\r\n            \r\n\r\n    }\r\n    return(\r\n        <div>\r\n            {isAvailable&& <div>Something went wrong!</div>}\r\n            {!isAvailable&& <>\r\n            <Grid container spacing={0}>\r\n                <DetailsImageLayout\r\n                    image={image}\r\n                    ifPM={ifPM}\r\n                />\r\n                <MainDetails \r\n                    workOrderId={workOrderId}\r\n                    assetName={assetName}\r\n                    woType={woType}\r\n                    manufacturer={manufacturer}\r\n                    model={model}\r\n                    serial={serial}\r\n                    assetType={assetType}\r\n                    warrantyLabel={warrantyLabel}\r\n                    warranty={warranty}\r\n                    nullVal={nullVal}\r\n                />\r\n                <MainActions\r\n                    serviceProviders={serviceProviders}\r\n                    status={status}\r\n                />\r\n            </Grid>\r\n            <LinkActions\r\n                workOrderId={workOrderId}\r\n                invoiceStatus={invoiceStatus}\r\n                invoiceId={invoiceId}\r\n                proposalStatus={proposalStatus}\r\n                proposalId={proposalId}\r\n                assetId={assetId}\r\n            />\r\n            <Divider/>\r\n            <Grid container spacing={0}>\r\n                <WorkOrderDescription\r\n                    id={id}\r\n                    description={description}\r\n                    nullVal={nullVal}\r\n                />\r\n                <EnhancedDetails \r\n                    status={status}\r\n                    priority={priority}\r\n                    tradeType={tradeType}\r\n                    problemType={problemType}\r\n                    categoryType={categoryType}\r\n                    woType={woType}\r\n                    nte={nte}\r\n                    raisedNte={raisedNte}\r\n                    nullVal={nullVal}\r\n                />\r\n                <BoxedDetails \r\n                    proposalId={proposalId}\r\n                    invoiceId={invoiceId}\r\n                    currentEta={currentEta}\r\n                    createdDate={createdDate}\r\n                    serviceProvider={serviceProvider}\r\n                    serviceProviderLast={serviceProviderLast}\r\n                    proposalStatus={proposalStatus}\r\n                    invoiceStatus={invoiceStatus}\r\n                    assignTo={assignTo}\r\n                    nullVal={nullVal}\r\n                />\r\n                <LocationDetails\r\n                    locationAddress={locationAddress}\r\n                    location={location}\r\n                    locationPhone={locationPhone}\r\n                    nullVal={nullVal}\r\n                />\r\n            </Grid>\r\n            <Divider/>  \r\n            <TabsComponent\r\n                history={history}\r\n                attachments={attachments}\r\n                notes={notes}\r\n            /></>}                      \r\n        </div>            \r\n    )}\r\n}\r\n        ","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\helpers\\rendernull\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\constants\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rowbuilderlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\tablecolumnslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\reactwindowtablelayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rendersingleitemlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\renderdateitemlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rendermultiitemlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\constants\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\popupcomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\not-fixed.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\complete.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\cancel.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\reassigned.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\add-note.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\itemkeyhelper\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\createitemdatahelper\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\itemkeyhelper\\index.js",[],["453","454"],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\createitemdatahelper\\index.js",[],{"ruleId":"455","replacedBy":"456"},{"ruleId":"457","replacedBy":"458"},{"ruleId":"459","severity":1,"message":"460","line":5,"column":8,"nodeType":"461","messageId":"462","endLine":5,"endColumn":13},{"ruleId":"459","severity":1,"message":"463","line":12,"column":3,"nodeType":"461","messageId":"462","endLine":12,"endColumn":11},{"ruleId":"459","severity":1,"message":"464","line":23,"column":21,"nodeType":"461","messageId":"462","endLine":23,"endColumn":31},{"ruleId":"459","severity":1,"message":"465","line":24,"column":20,"nodeType":"461","messageId":"462","endLine":24,"endColumn":31},{"ruleId":"459","severity":1,"message":"466","line":25,"column":22,"nodeType":"461","messageId":"462","endLine":25,"endColumn":35},{"ruleId":"459","severity":1,"message":"467","line":47,"column":5,"nodeType":"461","messageId":"462","endLine":47,"endColumn":13},{"ruleId":"459","severity":1,"message":"468","line":64,"column":9,"nodeType":"461","messageId":"462","endLine":64,"endColumn":24},{"ruleId":"459","severity":1,"message":"469","line":95,"column":11,"nodeType":"461","messageId":"462","endLine":95,"endColumn":28},{"ruleId":"459","severity":1,"message":"470","line":70,"column":20,"nodeType":"461","messageId":"462","endLine":70,"endColumn":32},{"ruleId":"459","severity":1,"message":"471","line":8,"column":22,"nodeType":"461","messageId":"462","endLine":8,"endColumn":26},{"ruleId":"459","severity":1,"message":"472","line":28,"column":11,"nodeType":"461","messageId":"462","endLine":28,"endColumn":18},{"ruleId":"459","severity":1,"message":"473","line":57,"column":9,"nodeType":"461","messageId":"462","endLine":57,"endColumn":26},{"ruleId":"455","replacedBy":"474"},{"ruleId":"457","replacedBy":"475"},"no-native-reassign",["476"],"no-negated-in-lhs",["477"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'apiUsers' is defined but never used.","'setLoading' is assigned a value but never used.","'setUserRole' is assigned a value but never used.","'setUserStatus' is assigned a value but never used.","'userData' is defined but never used.","'searchTermState' is assigned a value but never used.","'buttonAttachments' is assigned a value but never used.","'historyCount' is assigned a value but never used.","'Link' is defined but never used.","'api_url' is assigned a value but never used.","'invoiceStatusDesc' is defined but never used.",["476"],["477"],"no-global-assign","no-unsafe-negation"]