[{"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\index.js":"1","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\serviceWorker.js":"2","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\App.js":"3","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\index.js":"4","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\store\\index.js":"5","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\bold.js":"6","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\light.js":"7","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\medium.js":"8","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\semibold.js":"9","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\heavy.js":"10","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\api\\index.js":"11","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\containers\\workorderscontainer\\index.js":"12","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\index.js":"13","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\index.js":"14","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\index.js":"15","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\context\\globalcontext\\index.js":"16","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\oauthtokenreducer\\index.js":"17","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\useraccountdatareducer\\index.js":"18","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\emergencyworkordersreducer\\index.js":"19","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderdetailsreducer\\index.js":"20","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\pendingworkordersreducer\\index.js":"21","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\ctasectionreducer\\index.js":"22","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workordersnotesreducer\\index.js":"23","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderunassignedreducer\\index.js":"24","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workordershistoryreducer\\index.js":"25","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\advancedsearchreducer\\index.js":"26","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderattachmentsreducer\\index.js":"27","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderassignedtomereducer\\index.js":"28","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\warrantymodalreducer\\index.js":"29","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\index.js":"30","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\index.js":"31","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\index.js":"32","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\index.js":"33","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\index.js":"34","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\index.js":"35","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\advancedsearchcomponent\\index.js":"36","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\alertComponent\\index.js":"37","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\useraccountdataactions\\index.js":"38","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\ctasectionactions\\index.js":"39","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\assignedtomeworkordersactions\\index.js":"40","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\pendingworkordersactions\\index.js":"41","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\unassignedworkordersactions\\index.js":"42","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\emercencyworkordersactions\\index.js":"43","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderdetailsactions\\index.js":"44","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\advancedsearchactions\\index.js":"45","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workordernotesactions\\index.js":"46","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderattachmentsactions\\index.js":"47","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderhistoryactions\\index.js":"48","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\warrantymodalactions\\index.js":"49","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\oauthtokenactions\\index.js":"50","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\constants\\index.js":"51","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\initialstate\\index.js":"52","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\index.js":"53","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\common\\index.js":"54","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\index.js":"55","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\helpers\\index.js":"56","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\index.js":"57","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\index.js":"58","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\index.js":"59","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbypriority\\index.js":"60","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbystatus\\index.js":"61","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\locationdetailslayout\\index.js":"62","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\enhanceddetailslayout\\index.js":"63","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\linkactionslayout\\index.js":"64","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\boxeddetailslayout\\index.js":"65","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\workorderdesriptionclayout\\index.js":"66","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\mainactionslayout\\index.js":"67","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\maindetailslayout\\index.js":"68","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\detailsimagelayout\\index.js":"69","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\detailslayout\\index.js":"70","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderprioritylayout\\index.js":"71","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\helpers\\rendernotnull\\index.js":"72","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\helpers\\rendernull\\index.js":"73","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderstatuslayout\\index.js":"74","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderregularrowlayout\\index.js":"75","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rowbuilderlayout\\index.js":"76","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\reactwindowtablelayout\\index.js":"77","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderimagelayout\\index.js":"78","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rendersingleitemlayout\\index.js":"79","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\tablecolumnslayout\\index.js":"80","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rendermultiitemlayout\\index.js":"81","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\helpers\\getmodalstyle\\index.js":"82","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbyassettype\\index.js":"83","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rowbuilderlayout\\index.js":"84","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\reactwindowtablelayout\\index.js":"85","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\tablecolumnslayout\\index.js":"86","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\index.js":"87","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\popupcomponent\\index.js":"88","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\renderdateitemlayout\\index.js":"89","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rendersingleitemlayout\\index.js":"90","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\constants\\index.js":"91","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rendermultiitemlayout\\index.js":"92","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\index.js":"93","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\constants\\index.js":"94","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\ctasectionlayout\\index.js":"95","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\featuredctalayout\\index.js":"96","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\cancel.js":"97","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\complete.js":"98","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\reassigned.js":"99","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\not-fixed.js":"100","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\add-note.js":"101","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\index.js":"102","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\createitemdatahelper\\index.js":"103","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\itemkeyhelper\\index.js":"104","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\itemkeyhelper\\index.js":"105","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\createitemdatahelper\\index.js":"106","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\faker\\index.js":"107","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\helpers\\setsearchfilterhelper\\index.js":"108","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\faker\\ctasectionactions\\index.js":"109"},{"size":1342,"mtime":1601950627368,"results":"110","hashOfConfig":"111"},{"size":5086,"mtime":1597349025916,"results":"112","hashOfConfig":"111"},{"size":3449,"mtime":1608322641389,"results":"113","hashOfConfig":"111"},{"size":1780,"mtime":1602208011385,"results":"114","hashOfConfig":"111"},{"size":1429,"mtime":1604519258867,"results":"115","hashOfConfig":"111"},{"size":156083,"mtime":1602208011381,"results":"116","hashOfConfig":"111"},{"size":153363,"mtime":1602208011388,"results":"117","hashOfConfig":"111"},{"size":155416,"mtime":1602208011391,"results":"118","hashOfConfig":"111"},{"size":156918,"mtime":1602208011394,"results":"119","hashOfConfig":"111"},{"size":159783,"mtime":1602208011384,"results":"120","hashOfConfig":"111"},{"size":1648,"mtime":1608322641390,"results":"121","hashOfConfig":"111"},{"size":56249,"mtime":1608322641393,"results":"122","hashOfConfig":"111"},{"size":1380,"mtime":1604519258864,"results":"123","hashOfConfig":"111"},{"size":941,"mtime":1608218110827,"results":"124","hashOfConfig":"111"},{"size":1570,"mtime":1606159211217,"results":"125","hashOfConfig":"111"},{"size":89,"mtime":1604434464103,"results":"126","hashOfConfig":"111"},{"size":517,"mtime":1602011502365,"results":"127","hashOfConfig":"111"},{"size":543,"mtime":1607378509313,"results":"128","hashOfConfig":"111"},{"size":545,"mtime":1602011502362,"results":"129","hashOfConfig":"111"},{"size":695,"mtime":1606159211231,"results":"130","hashOfConfig":"111"},{"size":539,"mtime":1602011502366,"results":"131","hashOfConfig":"111"},{"size":530,"mtime":1602011502361,"results":"132","hashOfConfig":"111"},{"size":649,"mtime":1606159211233,"results":"133","hashOfConfig":"111"},{"size":541,"mtime":1602011502373,"results":"134","hashOfConfig":"111"},{"size":540,"mtime":1602011502371,"results":"135","hashOfConfig":"111"},{"size":554,"mtime":1604434464106,"results":"136","hashOfConfig":"111"},{"size":552,"mtime":1602011502369,"results":"137","hashOfConfig":"111"},{"size":544,"mtime":1602011502368,"results":"138","hashOfConfig":"111"},{"size":533,"mtime":1604519258865,"results":"139","hashOfConfig":"111"},{"size":2035,"mtime":1608322641391,"results":"140","hashOfConfig":"111"},{"size":4010,"mtime":1604447600667,"results":"141","hashOfConfig":"111"},{"size":1897,"mtime":1607554926957,"results":"142","hashOfConfig":"111"},{"size":2805,"mtime":1608322641392,"results":"143","hashOfConfig":"111"},{"size":15576,"mtime":1608048397030,"results":"144","hashOfConfig":"111"},{"size":7446,"mtime":1608048397028,"results":"145","hashOfConfig":"111"},{"size":4884,"mtime":1608309598616,"results":"146","hashOfConfig":"111"},{"size":972,"mtime":1607554926932,"results":"147","hashOfConfig":"111"},{"size":553,"mtime":1607554926923,"results":"148","hashOfConfig":"111"},{"size":1052,"mtime":1607554926918,"results":"149","hashOfConfig":"111"},{"size":1101,"mtime":1607554926917,"results":"150","hashOfConfig":"111"},{"size":1066,"mtime":1607554926920,"results":"151","hashOfConfig":"111"},{"size":1076,"mtime":1607554926922,"results":"152","hashOfConfig":"111"},{"size":1096,"mtime":1607554926919,"results":"153","hashOfConfig":"111"},{"size":1803,"mtime":1606159211219,"results":"154","hashOfConfig":"111"},{"size":1968,"mtime":1607554926916,"results":"155","hashOfConfig":"111"},{"size":2019,"mtime":1607554926924,"results":"156","hashOfConfig":"111"},{"size":1084,"mtime":1605218443296,"results":"157","hashOfConfig":"111"},{"size":1047,"mtime":1604519258849,"results":"158","hashOfConfig":"111"},{"size":1264,"mtime":1604943235710,"results":"159","hashOfConfig":"111"},{"size":810,"mtime":1602011502322,"results":"160","hashOfConfig":"111"},{"size":1532,"mtime":1606159211227,"results":"161","hashOfConfig":"111"},{"size":187,"mtime":1604434464108,"results":"162","hashOfConfig":"111"},{"size":167,"mtime":1602011502338,"results":"163","hashOfConfig":"111"},{"size":5196,"mtime":1608218309137,"results":"164","hashOfConfig":"111"},{"size":237,"mtime":1605141776497,"results":"165","hashOfConfig":"111"},{"size":79,"mtime":1602795234181,"results":"166","hashOfConfig":"111"},{"size":1987,"mtime":1603122022290,"results":"167","hashOfConfig":"111"},{"size":926,"mtime":1604943235721,"results":"168","hashOfConfig":"111"},{"size":493,"mtime":1603153688757,"results":"169","hashOfConfig":"111"},{"size":744,"mtime":1608048397026,"results":"170","hashOfConfig":"111"},{"size":738,"mtime":1608048397027,"results":"171","hashOfConfig":"111"},{"size":1362,"mtime":1603153688764,"results":"172","hashOfConfig":"111"},{"size":7881,"mtime":1607554926959,"results":"173","hashOfConfig":"111"},{"size":2830,"mtime":1608221748788,"results":"174","hashOfConfig":"111"},{"size":3493,"mtime":1607559300098,"results":"175","hashOfConfig":"111"},{"size":1130,"mtime":1602208646339,"results":"176","hashOfConfig":"111"},{"size":4881,"mtime":1608309598624,"results":"177","hashOfConfig":"111"},{"size":1913,"mtime":1607554926962,"results":"178","hashOfConfig":"111"},{"size":992,"mtime":1607554926958,"results":"179","hashOfConfig":"111"},{"size":722,"mtime":1604519258857,"results":"180","hashOfConfig":"111"},{"size":4865,"mtime":1607559436837,"results":"181","hashOfConfig":"111"},{"size":7709,"mtime":1607554926956,"results":"182","hashOfConfig":"111"},{"size":449,"mtime":1602208011415,"results":"183","hashOfConfig":"111"},{"size":6394,"mtime":1607559436840,"results":"184","hashOfConfig":"111"},{"size":488,"mtime":1607559436838,"results":"185","hashOfConfig":"111"},{"size":3047,"mtime":1608309598620,"results":"186","hashOfConfig":"111"},{"size":3799,"mtime":1608309598619,"results":"187","hashOfConfig":"111"},{"size":1310,"mtime":1607559771036,"results":"188","hashOfConfig":"111"},{"size":7581,"mtime":1607559436839,"results":"189","hashOfConfig":"111"},{"size":1158,"mtime":1607559221128,"results":"190","hashOfConfig":"111"},{"size":1029,"mtime":1608048397024,"results":"191","hashOfConfig":"111"},{"size":210,"mtime":1602805194040,"results":"192","hashOfConfig":"111"},{"size":720,"mtime":1608048397025,"results":"193","hashOfConfig":"111"},{"size":4964,"mtime":1604447600670,"results":"194","hashOfConfig":"111"},{"size":2860,"mtime":1608309598622,"results":"195","hashOfConfig":"111"},{"size":1512,"mtime":1603153688763,"results":"196","hashOfConfig":"111"},{"size":279,"mtime":1602208011397,"results":"197","hashOfConfig":"111"},{"size":2935,"mtime":1607554926953,"results":"198","hashOfConfig":"111"},{"size":638,"mtime":1603153688760,"results":"199","hashOfConfig":"111"},{"size":1121,"mtime":1604447600669,"results":"200","hashOfConfig":"111"},{"size":429,"mtime":1602876781100,"results":"201","hashOfConfig":"111"},{"size":2135,"mtime":1602803774983,"results":"202","hashOfConfig":"111"},{"size":144,"mtime":1602011502341,"results":"203","hashOfConfig":"111"},{"size":429,"mtime":1608263276847,"results":"204","hashOfConfig":"111"},{"size":2416,"mtime":1607554926940,"results":"205","hashOfConfig":"111"},{"size":1349,"mtime":1607554926941,"results":"206","hashOfConfig":"111"},{"size":145,"mtime":1602208011396,"results":"207","hashOfConfig":"111"},{"size":149,"mtime":1602208011396,"results":"208","hashOfConfig":"111"},{"size":153,"mtime":1602208011399,"results":"209","hashOfConfig":"111"},{"size":150,"mtime":1602208011398,"results":"210","hashOfConfig":"111"},{"size":148,"mtime":1602208011395,"results":"211","hashOfConfig":"111"},{"size":144,"mtime":1602795234187,"results":"212","hashOfConfig":"111"},{"size":239,"mtime":1608309598617,"results":"213","hashOfConfig":"111"},{"size":228,"mtime":1607559436833,"results":"214","hashOfConfig":"111"},{"size":597,"mtime":1604447600666,"results":"215","hashOfConfig":"111"},{"size":225,"mtime":1602795234187,"results":"216","hashOfConfig":"111"},{"size":100,"mtime":1608322641395,"results":"217","hashOfConfig":"111"},{"size":32168,"mtime":1608322641398,"results":"218","hashOfConfig":"111"},{"size":234,"mtime":1608322641394,"results":"219","hashOfConfig":"111"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},"1f7jcx",{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"222"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"222"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"433"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"433"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\index.js",[],["442","443"],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\serviceWorker.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\App.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\store\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\bold.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\light.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\medium.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\semibold.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\heavy.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\api\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\containers\\workorderscontainer\\index.js",["444"],"//Basic imports\r\nimport React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\n//Components\r\nimport { \r\n    CTASectionComponent, \r\n    DataTableComponent, \r\n    WorkOrderDetailsComponent,\r\n    Alert, \r\n} from '../../components'\r\n\r\n//Material UI\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Link from '@material-ui/core/Link';\r\n\r\n//Actions\r\nimport { \r\n    oauthFetchToken,\r\n    fetchUsersInformation,\r\n    fetchCTAsData, \r\n    fetchSearchData,\r\n    fetchEmergencyWOData, \r\n    fetchPendingWOData, \r\n    fetchDetailsWOData,\r\n    fetchAssignedToMeWOData,\r\n    fetchUnassignedWOData,\r\n    fetchHistoryWOData,\r\n    fetchNotesWOData,\r\n    fetchAttachmentsWOData,\r\n    fetchWarrantyWOData,\r\n    createNoteWOData,\r\n    updateWOStatus,\r\n} from '../../actions';\r\n\r\n//Json Server API\r\n//To start the api server => json-server db.json --routes routes.json (Server running on localhost:3000)\r\n//Then run npm start / yarn start (Server running on localhost:3001)\r\n\r\nimport {\r\n    fetchCTAsDataTEST,\r\n} from '../../faker'\r\n\r\n//Context\r\nimport { GlobalContext } from '../../context/globalcontext'\r\n\r\n\r\n//Declaring global variables\r\n//Token\r\nlet token\r\n//User ID\r\nlet userId\r\nlet userData\r\n//CTA component\r\nlet ctadata\r\n//Datatable component\r\nlet tmpdata\r\n//Details component\r\nlet detailsdata\r\n//Tab component\r\nlet historydata\r\nlet notesdata\r\nlet attachmentsdata\r\nlet dtlsID\r\nlet trgtID\r\n//Search\r\nlet searchTerm\r\nlet searchBy\r\n//Warranty\r\nlet warrantydata\r\n//Filter\r\nlet filterByAssetType\r\nlet filterByStatus\r\nlet filterByPriority\r\n\r\nlet newNote\r\nlet newNoteAvailable\r\nlet noteDescription\r\n\r\nlet workOrderUpdateResponse\r\nlet updatedStatus\r\n\r\nclass WorkOrdersBuilder extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            targetId: \"emergencyWO\",\r\n            detailsId: \"\",\r\n            loading: false,\r\n            loadingDetails: false,\r\n            loadingAll: false,\r\n            searchTerm: \"\", \r\n            searchBy: 1,\r\n            filterByAssetType: 1,\r\n            filterByStatus: 1,\r\n            filterByPriority: 1,\r\n            newNote: '',\r\n            newNoteAvailable: false,\r\n            noteDescription: '',\r\n            workOrderUpdateResponse: '',\r\n            updatedStatus: '',\r\n            itsActive: false\r\n        };\r\n    }    \r\n    handleChangeStateSearchTerm = (value) => {\r\n        searchTerm = value     \r\n    }\r\n    handleSearchTerm = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            searchTerm: value,\r\n        }, this.handleChangeStateSearchTerm(value));\r\n    } \r\n    handleChangeStateSearchBy = (value) => {\r\n        searchBy = value  \r\n    }    \r\n    handleSearchBy = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            searchBy: value\r\n        }, this.handleChangeStateSearchBy(value));\r\n    }\r\n    handleChangeStateFilterByAssetType = (value) => {\r\n        filterByAssetType = value       \r\n        console.log(filterByAssetType)\r\n    }    \r\n    handleFilterByAssetType = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            filterByAssetType: value,\r\n        }, this.handleChangeStateFilterByAssetType(value))\r\n    } \r\n    handleChangeStateFilterByStatus = (value) => {\r\n        filterByStatus = value \r\n        console.log(filterByStatus)\r\n    }    \r\n    handleFilterByStatus = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            filterByStatus: value,\r\n        }, this.handleChangeStateFilterByStatus(value))        \r\n    } \r\n    handleChangeStateFilterByPriority = (value) => {\r\n        filterByPriority = value       \r\n        console.log(filterByPriority)\r\n    }    \r\n    handleFilterByPriority = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            filterByPriority: value,\r\n        }, this.handleChangeStateFilterByPriority(value))        \r\n    }\r\n\r\n    handleChangeStateFilterClearAll = () => {\r\n        filterByPriority = 1;\r\n        filterByStatus = 1;\r\n        filterByAssetType = 1; \r\n    }\r\n\r\n    handleFilterClearAll = (event) => {\r\n        this.setState({\r\n            filterByAssetType: 1,\r\n            filterByStatus: 1,\r\n            filterByPriority: 1,\r\n        }, this.handleChangeStateFilterClearAll()) \r\n    }\r\n\r\n    handleChangeNoteInput = (value) => {\r\n        noteDescription = value;\r\n        console.log(\"description\", noteDescription)\r\n    }\r\n    handleNoteInput = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            noteDescription: value\r\n        }, this.handleChangeNoteInput(value))\r\n    }\r\n\r\n    handleAddNote = (isAvailable) => {\r\n        newNoteAvailable = isAvailable\r\n        console.log(newNoteAvailable)\r\n    }\r\n    createNoteWOData = (event) => {\r\n        this.setState({\r\n            newNoteAvailable: !newNoteAvailable,\r\n            loadingDetails: true\r\n        }, this.handleAddNote(!newNoteAvailable))\r\n    }\r\n    \r\n    handleUpdateStatus = (target) => {\r\n        updatedStatus = target\r\n        console.log(\"updatedStatus\", updatedStatus)\r\n    }\r\n    updateWOStatus = (event) => {\r\n        let target = event.target.parentElement.getAttribute(\"status\")\r\n        target = target.toUpperCase().replace(' ', '_')\r\n        this.setState({\r\n            updatedStatus: target,\r\n            loadingDetails: true,\r\n        }, this.handleUpdateStatus(target))\r\n    }\r\n    handleDynamicDetails = (target) => {\r\n        dtlsID = target \r\n    }           \r\n    dynamicDetails = (event) => {\r\n        event.preventDefault();\r\n        let target = event.target.id\r\n        if(target.length>0){\r\n            this.setState({\r\n                detailsId: target,\r\n                loadingDetails: true\r\n            }, this.handleDynamicDetails(target))\r\n        }else{\r\n            target = event.target.closest('div')\r\n            target = target.id\r\n            this.setState({\r\n                detailsId: target,\r\n                loadingDetails: true\r\n            },  this.handleDynamicDetails(target))\r\n        }\r\n    }\r\n    handleDynamicData = (target) => {\r\n        trgtID = target\r\n        console.log(trgtID)\r\n    }      \r\n    dynamicData = (event) => {\r\n        event.preventDefault();\r\n        let target = event.target.id\r\n        if(target.length>0){\r\n            this.setState({\r\n                targetId: target,\r\n                loading: true\r\n            }, this.handleDynamicData(target))\r\n        }else{\r\n            target = event.target.closest('div')\r\n            target = target.id\r\n            this.setState({\r\n                targetId: target,\r\n                loading: true\r\n            }, this.handleDynamicData(target))\r\n        }\r\n        \r\n    }\r\n    \r\n    async componentDidMount() {\r\n        token = await this.props.oauthFetchToken()\r\n        //userData = await this.props.fetchUsersInformation()\r\n        //console.log(userData.userdata.user)\r\n        //userId = userData.userdata.user.user_id     \r\n        //Next line it's to develop in local     \r\n        userId = \"2152\"\r\n        this.setState({ \r\n            firstLoading: true\r\n        })\r\n        //ctadata = await this.props.fetchCTAsData()\r\n        ctadata = fetchCTAsDataTEST()\r\n        console.log(ctadata)\r\n        tmpdata = await this.props.fetchEmergencyWOData()  \r\n        console.log(tmpdata)\r\n        if(tmpdata.data.work_orders!==undefined) {\r\n            dtlsID = tmpdata.data.work_orders[0]['workOrderId']\r\n            this.setState({\r\n                detailsId: dtlsID,\r\n            })\r\n        }\r\n        historydata = await this.props.fetchHistoryWOData()\r\n        detailsdata = await this.props.fetchDetailsWOData()\r\n        notesdata = await this.props.fetchNotesWOData()\r\n        // this.sortOrderNotesByDate()\r\n        warrantydata = await this.props.fetchWarrantyWOData()\r\n        attachmentsdata = await this.props.fetchAttachmentsWOData()\r\n        this.setState({ firstLoading: false })\r\n        trgtID = trgtID===undefined?this.state.targetId:trgtID\r\n    }\r\n\r\n    /**\r\n     * handleId() => loads data changes\r\n     * handleAsyncId() => call async functions since cannot be pass through setState as callback\r\n     * handleChangePrevState() => trigger setState \r\n     * \r\n     * Author: Carlos Blanco\r\n     * Date: 11/13/2020\r\n     * Ticket: ET-735\r\n     * */\r\n    handleId = async(id) => {\r\n        dtlsID = id\r\n        detailsdata = await this.props.fetchDetailsWOData(dtlsID, token)\r\n        notesdata = await this.props.fetchNotesWOData(dtlsID, token)\r\n        // this.sortOrderNotesByDate()\r\n        attachmentsdata = await this.props.fetchAttachmentsWOData(dtlsID, token)\r\n        historydata = await this.props.fetchHistoryWOData(dtlsID, token)\r\n        warrantydata = await this.props.fetchWarrantyWOData(dtlsID, token)                  \r\n    }\r\n\r\n    handleAsyncId = (id) => {\r\n        dtlsID = id\r\n        this.handleId(dtlsID)\r\n    }\r\n    //Change details data\r\n    handleChangePrevState = (id) => {\r\n        dtlsID = id     \r\n        this.setState({\r\n            detailsId: dtlsID,\r\n            loading: true\r\n        }, this.handleAsyncId(id))        \r\n    }\r\n    //move active item to the top of grid\r\n    // array_move = (arr, old_index, new_index) => {\r\n    //     if (new_index >= arr.length) {\r\n    //         let k = new_index - arr.length + 1;\r\n    //         while (k--) {\r\n    //             arr.push(undefined);\r\n    //         }\r\n    //     }\r\n    //     arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n    //     return arr;\r\n    // };\r\n    // isCurrent = (element) => element.workOrderId.toString() === this.state.detailsId.toString();\r\n\r\n    async componentDidUpdate(prevProps, prevState) {\r\n\r\n        const currentState = this.state.targetId\r\n        //const props = this.props\r\n        const searchTermIn = this.state.searchTerm\r\n        const searchByIn = this.state.searchBy  \r\n        const filterByInByAssetType = this.state.filterByAssetType\r\n        const filterByInByStatus = this.state.filterByStatus\r\n        const filterByInByPriority = this.state.filterByPriority\r\n        if(\r\n            prevState.targetId !== this.state.targetId ||\r\n            prevState.detailsId !== this.state.detailsId ||\r\n            prevState.searchTerm !== this.state.searchTerm ||\r\n            prevState.searchBy !== this.state.searchBy ||\r\n            prevState.filterByAssetType !== this.state.filterByAssetType ||\r\n            prevState.filterByStatus !== this.state.filterByStatus ||\r\n            prevState.filterByPriority !== this.state.filterByPriority ||\r\n            prevState.newNoteAvailable !== this.state.newNoteAvailable ||\r\n            prevState.updatedStatus !== this.state.updatedStatus\r\n        ) {\r\n            this.setState({loading: true})\r\n            //Clean input if lenght is 0\r\n            if(searchTermIn.length===0) {\r\n                this.setState({\r\n                    searchTerm: \"\",\r\n                })\r\n            }       \r\n            //Set/Search/Filter data for DataTable Component\r\n            /*\r\n            let incomingData = setSearchFilterHelper({\r\n                tmpdata,\r\n                searchTerm,\r\n                searchTermIn,\r\n                searchByIn,\r\n                filterByInByAssetType,\r\n                filterByInByStatus,\r\n                filterByInByPriority,\r\n                currentState,\r\n                props\r\n            })\r\n            incomingData.then(res => {\r\n                console.log(res)\r\n                tmpdata = res\r\n            })\r\n            */\r\n            switch (currentState) {\r\n                /**\r\n                 * All \"term\" arrays elements should be modified in order\r\n                 * to work with the new APIs\r\n                 */\r\n                //Each case should be the CTA id\r\n                case \"emergencyWO\":\r\n                    if(searchTermIn.length>3 && searchByIn<=1) {\r\n                        let tmp = await this.props.fetchEmergencyWOData()\r\n                        let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        if(filterByInByAssetType.length>0){\r\n                            let dataSearched = dataSearch.filter(term => term['description'].includes(searchTerm.toLowerCase()))\r\n                            dataSearched = dataSearched.filter(term => term['asset']['assetType']['description'].toLowerCase().includes(filterByInByAssetType.toLowerCase()))\r\n                            if(filterByInByPriority.length>0) {\r\n                                dataSearched = dataSearched.filter(term => {\r\n                                    let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                                    return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                                })\r\n                            } else if(filterByInByStatus.length>0) {\r\n                                dataSearched = dataSearched.filter(term => {\r\n                                    let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                                    return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                                })                         \r\n                            }\r\n                            tmpdata = {\r\n                                data: {\r\n                                    work_orders: dataSearched\r\n                                }\r\n                            }                            \r\n                        } else {\r\n                            let dataSearched = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                            console.log(dataSearched)\r\n                            tmpdata = {\r\n                                data: {\r\n                                    work_orders: dataSearched\r\n                                }\r\n                            } \r\n                        }\r\n                    }else if(searchTermIn.length>3 && searchByIn>1){\r\n                        let tmp = await this.props.fetchSearchData()\r\n                        let dataSearched = tmp.data?tmp.data.work_orders:[]                        \r\n                        if(filterByInByPriority.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                            })\r\n                            tmpdata = {\r\n                                data: {\r\n                                    work_orders: dataSearched\r\n                                }\r\n                            }                             \r\n                        } else if(filterByInByStatus.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                            })\r\n                            tmpdata = {\r\n                                data: {\r\n                                    work_orders: dataSearched\r\n                                }\r\n                            }                                                      \r\n                        } else if(filterByInByAssetType.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                            })\r\n                            tmpdata = {\r\n                                data: {\r\n                                    work_orders: dataSearched\r\n                                }\r\n                            }   \r\n                        } else {\r\n                            tmpdata = await this.props.fetchSearchData()\r\n                        }                        \r\n                    //Default filter by asset type without search                        \r\n                    }else if(filterByInByAssetType.length>0) {\r\n                        let tmp = await this.props.fetchEmergencyWOData()\r\n                        let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        let dataSearched = dataSearch.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                        if(filterByInByPriority.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                            })\r\n                        } else if(filterByInByStatus.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                            })                         \r\n                        }                        \r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }\r\n                    //Default filter by status without search   \r\n                    }else if(filterByInByStatus.length>0) {\r\n                        let tmp = await this.props.fetchEmergencyWOData()\r\n                        let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        let dataSearched = dataSearch.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })\r\n                        if(filterByInByAssetType.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                            })\r\n                        } else if(filterByInByPriority.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                            })                         \r\n                        }                        \r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }  \r\n                    //Default filter by priority without search   \r\n                    }else if(filterByInByPriority.length>0) {\r\n                        let tmp = await this.props.fetchEmergencyWOData()\r\n                        let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        let dataSearched = dataSearch.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })\r\n                        if(filterByInByAssetType.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                            })\r\n                        } else if(filterByInByStatus.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                            })                         \r\n                        }                        \r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                                              \r\n                    }else if(searchTermIn.length === 0) {\r\n                        tmpdata = await this.props.fetchEmergencyWOData()\r\n                    }                \r\n                    break; \r\n                case \"pendingWO\":\r\n                if(searchTermIn.length>3 && searchByIn<=1) {\r\n                    let tmp = await this.props.fetchPendingWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    if(filterByInByAssetType.length>0){\r\n                        let dataSearched = dataSearch.filter(term => term['description'].includes(searchTerm.toLowerCase()))\r\n                        dataSearched = dataSearched.filter(term => term['asset']['assetType']['description'].toLowerCase().includes(filterByInByAssetType.toLowerCase()))\r\n                        if(filterByInByPriority.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                            })\r\n                        } else if(filterByInByStatus.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                            })                         \r\n                        }\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                            \r\n                    } else {\r\n                        let dataSearched = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        } \r\n                    }\r\n                }else if(searchTermIn.length>3 && searchByIn>1){\r\n                    let tmp = await this.props.fetchSearchData()\r\n                    let dataSearched = tmp.data?tmp.data.work_orders:[]                        \r\n                    if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                             \r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                                                      \r\n                    } else if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }   \r\n                    } else {\r\n                        tmpdata = await this.props.fetchSearchData()\r\n                    }                        \r\n                //Default filter by asset type without search                        \r\n                }else if(filterByInByAssetType.length>0) {\r\n                    let tmp = await this.props.fetchPendingWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    })\r\n                    if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }\r\n                //Default filter by status without search   \r\n                }else if(filterByInByStatus.length>0) {\r\n                    let tmp = await this.props.fetchPendingWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    })\r\n                    if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }  \r\n                //Default filter by priority without search   \r\n                }else if(filterByInByPriority.length>0) {\r\n                    let tmp = await this.props.fetchPendingWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    })\r\n                    if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }                                              \r\n                }else {\r\n                    tmpdata = await this.props.fetchPendingWOData()\r\n                }                \r\n                break;                   \r\n                case \"assignedWO\":\r\n                if(searchTermIn.length>3 && searchByIn<=1) {\r\n                    let tmp = await this.props.fetchAssignedToMeWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    if(filterByInByAssetType.length>0){\r\n                        let dataSearched = dataSearch.filter(term => term['description'].includes(searchTerm.toLowerCase()))\r\n                        dataSearched = dataSearched.filter(term => term['asset']['assetType']['description'].toLowerCase().includes(filterByInByAssetType.toLowerCase()))\r\n                        if(filterByInByPriority.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                            })\r\n                        } else if(filterByInByStatus.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                            })                         \r\n                        }\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                            \r\n                    } else {\r\n                        let dataSearched = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        } \r\n                    }\r\n                }else if(searchTermIn.length>3 && searchByIn>1){\r\n                    let tmp = await this.props.fetchSearchData()\r\n                    let dataSearched = tmp.data?tmp.data.work_orders:[]                        \r\n                    if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                             \r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                                                      \r\n                    } else if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }   \r\n                    } else {\r\n                        tmpdata = await this.props.fetchSearchData()\r\n                    }                        \r\n                //Default filter by asset type without search                        \r\n                }else if(filterByInByAssetType.length>0) {\r\n                    let tmp = await this.props.fetchAssignedToMeWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    })\r\n                    if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }\r\n                //Default filter by status without search   \r\n                }else if(filterByInByStatus.length>0) {\r\n                    let tmp = await this.props.fetchAssignedToMeWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    })\r\n                    if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }  \r\n                //Default filter by priority without search   \r\n                }else if(filterByInByPriority.length>0) {\r\n                    let tmp = await this.props.fetchAssignedToMeWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    })\r\n                    if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }                                              \r\n                }else {\r\n                    tmpdata = await this.props.fetchAssignedToMeWOData()\r\n                }                \r\n                break; \r\n                case \"unassignedWO\":\r\n                if(searchTermIn.length>3 && searchByIn<=1) {\r\n                    let tmp = await this.props.fetchUnassignedWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    if(filterByInByAssetType.length>0){\r\n                        let dataSearched = dataSearch.filter(term => term['description'].includes(searchTerm.toLowerCase()))\r\n                        dataSearched = dataSearched.filter(term => term['asset']['assetType']['description'].toLowerCase().includes(filterByInByAssetType.toLowerCase()))\r\n                        if(filterByInByPriority.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                            })\r\n                        } else if(filterByInByStatus.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                            })                         \r\n                        }\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                            \r\n                    } else {\r\n                        let dataSearched = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        } \r\n                    }\r\n                }else if(searchTermIn.length>3 && searchByIn>1){\r\n                    let tmp = await this.props.fetchSearchData()\r\n                    let dataSearched = tmp.data?tmp.data.work_orders:[]                        \r\n                    if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                             \r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                                                      \r\n                    } else if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }   \r\n                    } else {\r\n                        tmpdata = await this.props.fetchSearchData()\r\n                    }                        \r\n                //Default filter by asset type without search                        \r\n                }else if(filterByInByAssetType.length>0) {\r\n                    let tmp = await this.props.fetchUnassignedWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    })\r\n                    if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }\r\n                //Default filter by status without search   \r\n                }else if(filterByInByStatus.length>0) {\r\n                    let tmp = await this.props.fetchUnassignedWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    })\r\n                    if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }  \r\n                //Default filter by priority without search   \r\n                }else if(filterByInByPriority.length>0) {\r\n                    let tmp = await this.props.fetchUnassignedWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    })\r\n                    if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }                                              \r\n                }else {\r\n                    tmpdata = await this.props.fetchUnassignedWOData()\r\n                }                \r\n                break;                                                       \r\n                default:\r\n                    tmpdata = await this.props.fetchEmergencyWOData()\r\n                    break;\r\n            }\r\n        \r\n            const handleId = async(dtlsID) => {\r\n                detailsdata = await this.props.fetchDetailsWOData(dtlsID, token)\r\n                notesdata = await this.props.fetchNotesWOData(dtlsID, token)\r\n                // this.sortOrderNotesByDate()\r\n                attachmentsdata = await this.props.fetchAttachmentsWOData(dtlsID, token)\r\n                historydata = await this.props.fetchHistoryWOData(dtlsID, token)\r\n                warrantydata = await this.props.fetchWarrantyWOData(dtlsID, token)\r\n                this.setState({loadingDetails: false})\r\n            }\r\n            //Change details data\r\n            const handleChangePrevState = (dtlsID) => {\r\n                const id = dtlsID\r\n                handleId(id)\r\n            }\r\n\r\n            // let currentIndex =  tmpdata.data.work_orders.findIndex(this.isCurrent);\r\n            // if(currentIndex === -1) currentIndex = 0\r\n            // this.array_move(tmpdata.data.work_orders, currentIndex, 0)\r\n\r\n            const prevSteDtls = prevState.detailsId\r\n            const currentSteDtls = this.state.detailsId\r\n            const tmpDtls = tmpdata.data!==undefined?\r\n                                (tmpdata.data.work_orders!==null?\r\n                                    (tmpdata.data.work_orders[0]!==undefined?\r\n                                        tmpdata.data.work_orders[0]['workOrderId']:\r\n                                        dtlsID):dtlsID):\r\n                                        dtlsID\r\n            //Choose if details preview it's based on the first response element or the selected by the user when clicks the row\r\n            if( prevSteDtls !== ''){\r\n                if( prevSteDtls !== currentSteDtls ) {\r\n                    this.setState({\r\n                        detailsId: dtlsID,\r\n                        loadingDetails: true\r\n                    }, handleChangePrevState(dtlsID)) \r\n                } else {\r\n                    dtlsID = tmpDtls             \r\n                    this.setState({\r\n                        detailsId: dtlsID,\r\n                    }, handleChangePrevState(dtlsID))    \r\n                }\r\n            }\r\n            \r\n            const prevNoteStatus = prevState.newNoteAvailable\r\n            const currentNoteStatus = this.state.newNoteAvailable\r\n            if( prevNoteStatus !== currentNoteStatus) {\r\n                newNote = await this.props.createNoteWOData(noteDescription, dtlsID, token, userId)\r\n                this.setState({\r\n                    newNote: newNote.data,\r\n                    loadingDetails: true\r\n                }, handleChangePrevState(dtlsID))\r\n            }\r\n\r\n            const prevUpdatedStatus = prevState.updatedStatus\r\n            const currentUpdatedStatus = this.state.updatedStatus\r\n            if( prevUpdatedStatus !== currentUpdatedStatus) {\r\n                workOrderUpdateResponse = await this.props.updateWOStatus(dtlsID, token, updatedStatus)\r\n                this.setState({\r\n                    workOrderUpdateResponse: workOrderUpdateResponse,\r\n                    loadingDetails: true\r\n                }, handleChangePrevState(dtlsID))\r\n            }\r\n\r\n            // console.log(\"dltsID\", this.state.deta)\r\n            //Normalize state to avoid missing data or state changes\r\n            this.setState({\r\n                detailsId: dtlsID,\r\n                targetId: this.state.targetId,\r\n                loading: false\r\n            }, handleChangePrevState(dtlsID)) \r\n            \r\n        }\r\n    }\r\n    render() {\r\n        const globalState = {\r\n            dynamicDetails: this.dynamicDetails,\r\n            dynamicData: this.dynamicData,\r\n            handleSearchTerm: this.handleSearchTerm,\r\n            handleSearchBy: this.handleSearchBy,\r\n            handleFilterByAssetType: this.handleFilterByAssetType,\r\n            handleFilterByStatus: this.handleFilterByStatus,\r\n            handleFilterByPriority: this.handleFilterByPriority,\r\n            handleFilterClearAll: this.handleFilterClearAll,\r\n            createNoteWOData: this.createNoteWOData,\r\n            updateWOStatus: this.updateWOStatus,\r\n            handleNoteInput: this.handleNoteInput,\r\n            currentDtlsId: this.state.detailsId,\r\n            noteDescription: this.state.noteDescription,\r\n            filterByStateAssetType: this.state.filterByAssetType,\r\n            filterByStateStatus: this.state.filterByStatus,\r\n            filterByStatePriority: this.state.filterByPriority,                        \r\n            searchByState: this.state.searchBy,\r\n            searchTermState: this.state.searchTerm,\r\n        }\r\n        return (\r\n            <GlobalContext.Provider value={globalState}>\r\n                <div className=\"work-orders-container\">\r\n                    <Alert severity=\"warning\">\r\n                        <Link href=\"/admin/WorkOrders\" target=\"_blank\" rel=\"noopener\" color=\"inherit\">\r\n                            <i>Missing Something? Go to the Old Version</i>\r\n                        </Link>\r\n                    </Alert>\r\n                    <Grid className=\"cta-section-component\">\r\n                        <CTASectionComponent \r\n                            ctadata={ctadata}\r\n                            tmpdata={tmpdata} \r\n                        />\r\n                    </Grid>            \r\n                    <Grid container className=\"content-section\">\r\n                        <Grid item xs={12} md={7} lg={7}>\r\n                            <DataTableComponent\r\n                                tmpdata={tmpdata}\r\n                                loading={this.state.loading}\r\n                                firstLoading={this.state.firstLoading}\r\n                            />\r\n                        </Grid>        \r\n                        <Grid item xs={12} md={5} lg={5}>\r\n                            <WorkOrderDetailsComponent\r\n                                loadingDetails={this.state.loadingDetails}\r\n                                detailsdata={detailsdata}\r\n                                history={historydata} \r\n                                attachments={attachmentsdata} \r\n                                notes={notesdata}\r\n                                firstLoading={this.state.firstLoading}\r\n                                warranty={warrantydata}\r\n                            />\r\n                        </Grid>  \r\n                    </Grid>  \r\n                </div>   \r\n            </GlobalContext.Provider>                   \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    oauthFetchToken: () => dispatch(oauthFetchToken()),\r\n    fetchCTAsData: () => dispatch(fetchCTAsData(token, userId)),   \r\n    fetchSearchData: () => dispatch(fetchSearchData(searchTerm, searchBy, token, userId)),   \r\n    fetchWarrantyWOData: () => dispatch(fetchWarrantyWOData(dtlsID, token)),   \r\n    fetchPendingWOData: () => dispatch(fetchPendingWOData(token, userId)),\r\n    fetchEmergencyWOData: () => dispatch(fetchEmergencyWOData(token, userId)),\r\n    fetchUsersInformation: () => dispatch(fetchUsersInformation(token)),\r\n    fetchDetailsWOData: () => dispatch(fetchDetailsWOData(dtlsID, token)),\r\n    updateWOStatus: () => dispatch(updateWOStatus(dtlsID, token, updatedStatus)),\r\n    fetchAssignedToMeWOData: () => dispatch(fetchAssignedToMeWOData(token, userId)),\r\n    fetchUnassignedWOData: () => dispatch(fetchUnassignedWOData(token, userId)),\r\n    fetchHistoryWOData: () => dispatch(fetchHistoryWOData(dtlsID, token)),\r\n    fetchNotesWOData: () => dispatch(fetchNotesWOData(dtlsID, token)),\r\n    createNoteWOData: () => dispatch(createNoteWOData(noteDescription, dtlsID, token, userId)),\r\n    fetchAttachmentsWOData: ()=> dispatch(fetchAttachmentsWOData(dtlsID, token)),\r\n})\r\n\r\n\r\nconst WorkOrdersContainer = connect(mapStateToProps, mapDispatchToProps)(WorkOrdersBuilder)\r\n\r\nexport default WorkOrdersContainer;","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\context\\globalcontext\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\oauthtokenreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\useraccountdatareducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\emergencyworkordersreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderdetailsreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\pendingworkordersreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\ctasectionreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workordersnotesreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderunassignedreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workordershistoryreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\advancedsearchreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderattachmentsreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderassignedtomereducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\warrantymodalreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\advancedsearchcomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\alertComponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\useraccountdataactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\ctasectionactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\assignedtomeworkordersactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\pendingworkordersactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\unassignedworkordersactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\emercencyworkordersactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderdetailsactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\advancedsearchactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workordernotesactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderattachmentsactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderhistoryactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\warrantymodalactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\oauthtokenactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\constants\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\initialstate\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\common\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\helpers\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbypriority\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbystatus\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\locationdetailslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\enhanceddetailslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\linkactionslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\boxeddetailslayout\\index.js",["445"],"//Basic imports\r\nimport React from 'react';\r\nimport Moment from 'react-moment';\r\n\r\n//Material UI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    text: {\r\n        fontSize: \"14px\",\r\n        lineHeight: \"25px\"\r\n    },\r\n    etaSection: {\r\n        border: \"1px solid #cccccc\",\r\n        borderRadius: \"5px\",\r\n        padding: \"10px\"\r\n    },  \r\n    date: {\r\n        fontWeight: 600,\r\n        color: \"#F20050\",\r\n    }  \r\n}));\r\n\r\nexport const BoxedDetails = ({currentEta, serviceProvider, serviceProviderLast, proposalStatus, invoiceStatus, nullVal}) => {\r\n    const classes = useStyles()\r\n    const smallSize = 12\r\n    const mediumSize = 6\r\n    const unixtest = currentEta!==null?currentEta:nullVal\r\n    const testing = Date.parse(unixtest)\r\n    //console.log(testing)\r\n    return (\r\n        <Grid item xs={smallSize} md={12} lg={7} className={classes.etaSection}>\r\n            <Grid container>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}><strong>Current ETA: </strong></Typography>\r\n                </Grid>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}><span className={classes.date}><Moment format=\"MMMM D, YYYY hh:mm a\">{currentEta!==null?currentEta:nullVal}</Moment></span></Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}><strong>Service Provider: </strong></Typography>\r\n                </Grid>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}>{serviceProvider!==null?serviceProvider:nullVal} {serviceProviderLast!==null?serviceProviderLast:nullVal}</Typography>\r\n                </Grid>\r\n            </Grid>            \r\n            <Grid container>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}><strong>Assigned To: </strong></Typography>\r\n                </Grid>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}>N/A</Typography>\r\n                </Grid>\r\n            </Grid>     \r\n            <Grid container>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}><strong>Proposal Status: </strong></Typography>                    \r\n                </Grid>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                        <Typography className={classes.text}>{proposalStatus!==null?proposalStatus:nullVal}</Typography>\r\n                </Grid>               \r\n            </Grid>                    \r\n            <Grid container>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}><strong>Invoice Status: </strong></Typography>                    \r\n                </Grid>\r\n                <Grid item xs={smallSize} md={mediumSize}>\r\n                    <Typography className={classes.text}>{invoiceStatus!==null?invoiceStatus:nullVal}</Typography>\r\n                </Grid>                              \r\n            </Grid>             \r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\workorderdesriptionclayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\mainactionslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\maindetailslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\detailsimagelayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\detailslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderprioritylayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\helpers\\rendernotnull\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\helpers\\rendernull\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderstatuslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderregularrowlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rowbuilderlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\reactwindowtablelayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderimagelayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rendersingleitemlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\tablecolumnslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rendermultiitemlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\helpers\\getmodalstyle\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbyassettype\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rowbuilderlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\reactwindowtablelayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\tablecolumnslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\popupcomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\renderdateitemlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rendersingleitemlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\constants\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rendermultiitemlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\constants\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\ctasectionlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\featuredctalayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\cancel.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\complete.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\reassigned.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\not-fixed.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\add-note.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\createitemdatahelper\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\itemkeyhelper\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\itemkeyhelper\\index.js",[],["446","447"],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\createitemdatahelper\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\faker\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\helpers\\setsearchfilterhelper\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\faker\\ctasectionactions\\index.js",[],{"ruleId":"448","replacedBy":"449"},{"ruleId":"450","replacedBy":"451"},{"ruleId":"452","severity":1,"message":"453","line":53,"column":5,"nodeType":"454","messageId":"455","endLine":53,"endColumn":13},{"ruleId":"452","severity":1,"message":"456","line":32,"column":11,"nodeType":"454","messageId":"455","endLine":32,"endColumn":18},{"ruleId":"448","replacedBy":"457"},{"ruleId":"450","replacedBy":"458"},"no-native-reassign",["459"],"no-negated-in-lhs",["460"],"no-unused-vars","'userData' is defined but never used.","Identifier","unusedVar","'testing' is assigned a value but never used.",["459"],["460"],"no-global-assign","no-unsafe-negation"]