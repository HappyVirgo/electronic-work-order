[{"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\index.js":"1","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\serviceWorker.js":"2","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\App.js":"3","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\index.js":"4","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\store\\index.js":"5","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\bold.js":"6","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\light.js":"7","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\medium.js":"8","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\semibold.js":"9","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\heavy.js":"10","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\api\\index.js":"11","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\containers\\workorderscontainer\\index.js":"12","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\index.js":"13","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\index.js":"14","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\index.js":"15","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\context\\globalcontext\\index.js":"16","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\oauthtokenreducer\\index.js":"17","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\useraccountdatareducer\\index.js":"18","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\emergencyworkordersreducer\\index.js":"19","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderdetailsreducer\\index.js":"20","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\pendingworkordersreducer\\index.js":"21","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\ctasectionreducer\\index.js":"22","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workordersnotesreducer\\index.js":"23","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderunassignedreducer\\index.js":"24","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workordershistoryreducer\\index.js":"25","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\advancedsearchreducer\\index.js":"26","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderattachmentsreducer\\index.js":"27","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderassignedtomereducer\\index.js":"28","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\warrantymodalreducer\\index.js":"29","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\index.js":"30","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\index.js":"31","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\index.js":"32","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\index.js":"33","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\index.js":"34","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\index.js":"35","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\advancedsearchcomponent\\index.js":"36","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\alertComponent\\index.js":"37","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\useraccountdataactions\\index.js":"38","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\ctasectionactions\\index.js":"39","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\assignedtomeworkordersactions\\index.js":"40","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\pendingworkordersactions\\index.js":"41","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\unassignedworkordersactions\\index.js":"42","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\emercencyworkordersactions\\index.js":"43","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderdetailsactions\\index.js":"44","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\advancedsearchactions\\index.js":"45","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workordernotesactions\\index.js":"46","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderattachmentsactions\\index.js":"47","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderhistoryactions\\index.js":"48","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\warrantymodalactions\\index.js":"49","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\oauthtokenactions\\index.js":"50","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\constants\\index.js":"51","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\initialstate\\index.js":"52","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\index.js":"53","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\common\\index.js":"54","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\index.js":"55","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\helpers\\index.js":"56","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\index.js":"57","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\index.js":"58","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\index.js":"59","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbypriority\\index.js":"60","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbystatus\\index.js":"61","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\locationdetailslayout\\index.js":"62","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\enhanceddetailslayout\\index.js":"63","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\linkactionslayout\\index.js":"64","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\boxeddetailslayout\\index.js":"65","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\workorderdesriptionclayout\\index.js":"66","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\mainactionslayout\\index.js":"67","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\maindetailslayout\\index.js":"68","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\detailsimagelayout\\index.js":"69","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\detailslayout\\index.js":"70","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderprioritylayout\\index.js":"71","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\helpers\\rendernotnull\\index.js":"72","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\helpers\\rendernull\\index.js":"73","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderstatuslayout\\index.js":"74","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderregularrowlayout\\index.js":"75","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rowbuilderlayout\\index.js":"76","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\reactwindowtablelayout\\index.js":"77","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderimagelayout\\index.js":"78","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rendersingleitemlayout\\index.js":"79","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\tablecolumnslayout\\index.js":"80","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rendermultiitemlayout\\index.js":"81","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\helpers\\getmodalstyle\\index.js":"82","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbyassettype\\index.js":"83","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rowbuilderlayout\\index.js":"84","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\reactwindowtablelayout\\index.js":"85","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\tablecolumnslayout\\index.js":"86","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\index.js":"87","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\popupcomponent\\index.js":"88","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\renderdateitemlayout\\index.js":"89","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rendersingleitemlayout\\index.js":"90","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\constants\\index.js":"91","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rendermultiitemlayout\\index.js":"92","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\index.js":"93","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\constants\\index.js":"94","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\ctasectionlayout\\index.js":"95","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\featuredctalayout\\index.js":"96","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\cancel.js":"97","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\complete.js":"98","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\reassigned.js":"99","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\not-fixed.js":"100","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\add-note.js":"101","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\index.js":"102","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\createitemdatahelper\\index.js":"103","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\itemkeyhelper\\index.js":"104","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\itemkeyhelper\\index.js":"105","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\createitemdatahelper\\index.js":"106","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\faker\\index.js":"107","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\faker\\ctasectionactions\\index.js":"108"},{"size":1342,"mtime":1601950627368,"results":"109","hashOfConfig":"110"},{"size":5086,"mtime":1597349025916,"results":"111","hashOfConfig":"110"},{"size":2810,"mtime":1609870864955,"results":"112","hashOfConfig":"110"},{"size":1780,"mtime":1602208011385,"results":"113","hashOfConfig":"110"},{"size":1429,"mtime":1604519258867,"results":"114","hashOfConfig":"110"},{"size":156083,"mtime":1602208011381,"results":"115","hashOfConfig":"110"},{"size":153363,"mtime":1602208011388,"results":"116","hashOfConfig":"110"},{"size":155416,"mtime":1602208011391,"results":"117","hashOfConfig":"110"},{"size":156918,"mtime":1602208011394,"results":"118","hashOfConfig":"110"},{"size":159783,"mtime":1602208011384,"results":"119","hashOfConfig":"110"},{"size":1917,"mtime":1609870864958,"results":"120","hashOfConfig":"110"},{"size":58017,"mtime":1609870864962,"results":"121","hashOfConfig":"110"},{"size":1380,"mtime":1604519258864,"results":"122","hashOfConfig":"110"},{"size":941,"mtime":1608218110827,"results":"123","hashOfConfig":"110"},{"size":1626,"mtime":1609799366933,"results":"124","hashOfConfig":"110"},{"size":89,"mtime":1604434464103,"results":"125","hashOfConfig":"110"},{"size":517,"mtime":1602011502365,"results":"126","hashOfConfig":"110"},{"size":543,"mtime":1607378509313,"results":"127","hashOfConfig":"110"},{"size":545,"mtime":1602011502362,"results":"128","hashOfConfig":"110"},{"size":866,"mtime":1609799366950,"results":"129","hashOfConfig":"110"},{"size":539,"mtime":1602011502366,"results":"130","hashOfConfig":"110"},{"size":530,"mtime":1602011502361,"results":"131","hashOfConfig":"110"},{"size":649,"mtime":1606159211233,"results":"132","hashOfConfig":"110"},{"size":541,"mtime":1602011502373,"results":"133","hashOfConfig":"110"},{"size":540,"mtime":1602011502371,"results":"134","hashOfConfig":"110"},{"size":554,"mtime":1604434464106,"results":"135","hashOfConfig":"110"},{"size":552,"mtime":1602011502369,"results":"136","hashOfConfig":"110"},{"size":544,"mtime":1602011502368,"results":"137","hashOfConfig":"110"},{"size":533,"mtime":1604519258865,"results":"138","hashOfConfig":"110"},{"size":2096,"mtime":1609870864960,"results":"139","hashOfConfig":"110"},{"size":4010,"mtime":1604447600667,"results":"140","hashOfConfig":"110"},{"size":1990,"mtime":1609799366942,"results":"141","hashOfConfig":"110"},{"size":2829,"mtime":1608669901622,"results":"142","hashOfConfig":"110"},{"size":15576,"mtime":1608048397030,"results":"143","hashOfConfig":"110"},{"size":10363,"mtime":1609799366936,"results":"144","hashOfConfig":"110"},{"size":4884,"mtime":1608309598616,"results":"145","hashOfConfig":"110"},{"size":938,"mtime":1608655283137,"results":"146","hashOfConfig":"110"},{"size":553,"mtime":1607554926923,"results":"147","hashOfConfig":"110"},{"size":1052,"mtime":1607554926918,"results":"148","hashOfConfig":"110"},{"size":1101,"mtime":1607554926917,"results":"149","hashOfConfig":"110"},{"size":1066,"mtime":1607554926920,"results":"150","hashOfConfig":"110"},{"size":1076,"mtime":1607554926922,"results":"151","hashOfConfig":"110"},{"size":1096,"mtime":1607554926919,"results":"152","hashOfConfig":"110"},{"size":2888,"mtime":1609870864956,"results":"153","hashOfConfig":"110"},{"size":1968,"mtime":1607554926916,"results":"154","hashOfConfig":"110"},{"size":2829,"mtime":1609870864957,"results":"155","hashOfConfig":"110"},{"size":1084,"mtime":1605218443296,"results":"156","hashOfConfig":"110"},{"size":1047,"mtime":1604519258849,"results":"157","hashOfConfig":"110"},{"size":1264,"mtime":1604943235710,"results":"158","hashOfConfig":"110"},{"size":810,"mtime":1602011502322,"results":"159","hashOfConfig":"110"},{"size":1672,"mtime":1609799366949,"results":"160","hashOfConfig":"110"},{"size":187,"mtime":1604434464108,"results":"161","hashOfConfig":"110"},{"size":167,"mtime":1602011502338,"results":"162","hashOfConfig":"110"},{"size":5196,"mtime":1608218309137,"results":"163","hashOfConfig":"110"},{"size":237,"mtime":1605141776497,"results":"164","hashOfConfig":"110"},{"size":79,"mtime":1602795234181,"results":"165","hashOfConfig":"110"},{"size":1987,"mtime":1603122022290,"results":"166","hashOfConfig":"110"},{"size":926,"mtime":1604943235721,"results":"167","hashOfConfig":"110"},{"size":493,"mtime":1603153688757,"results":"168","hashOfConfig":"110"},{"size":744,"mtime":1608048397026,"results":"169","hashOfConfig":"110"},{"size":738,"mtime":1608048397027,"results":"170","hashOfConfig":"110"},{"size":1362,"mtime":1603153688764,"results":"171","hashOfConfig":"110"},{"size":7881,"mtime":1607554926959,"results":"172","hashOfConfig":"110"},{"size":2850,"mtime":1608655283148,"results":"173","hashOfConfig":"110"},{"size":3812,"mtime":1609799366944,"results":"174","hashOfConfig":"110"},{"size":1130,"mtime":1602208646339,"results":"175","hashOfConfig":"110"},{"size":7901,"mtime":1609870864961,"results":"176","hashOfConfig":"110"},{"size":1913,"mtime":1607554926962,"results":"177","hashOfConfig":"110"},{"size":992,"mtime":1607554926958,"results":"178","hashOfConfig":"110"},{"size":777,"mtime":1609799366945,"results":"179","hashOfConfig":"110"},{"size":4865,"mtime":1607559436837,"results":"180","hashOfConfig":"110"},{"size":8970,"mtime":1609799366941,"results":"181","hashOfConfig":"110"},{"size":449,"mtime":1602208011415,"results":"182","hashOfConfig":"110"},{"size":6581,"mtime":1608655283141,"results":"183","hashOfConfig":"110"},{"size":488,"mtime":1607559436838,"results":"184","hashOfConfig":"110"},{"size":3077,"mtime":1608655283142,"results":"185","hashOfConfig":"110"},{"size":3486,"mtime":1608655283140,"results":"186","hashOfConfig":"110"},{"size":1492,"mtime":1609799366935,"results":"187","hashOfConfig":"110"},{"size":7581,"mtime":1607559436839,"results":"188","hashOfConfig":"110"},{"size":1203,"mtime":1608655283143,"results":"189","hashOfConfig":"110"},{"size":1029,"mtime":1608048397024,"results":"190","hashOfConfig":"110"},{"size":210,"mtime":1602805194040,"results":"191","hashOfConfig":"110"},{"size":720,"mtime":1608048397025,"results":"192","hashOfConfig":"110"},{"size":4964,"mtime":1604447600670,"results":"193","hashOfConfig":"110"},{"size":2860,"mtime":1608309598622,"results":"194","hashOfConfig":"110"},{"size":1512,"mtime":1603153688763,"results":"195","hashOfConfig":"110"},{"size":279,"mtime":1602208011397,"results":"196","hashOfConfig":"110"},{"size":3492,"mtime":1609799366938,"results":"197","hashOfConfig":"110"},{"size":638,"mtime":1603153688760,"results":"198","hashOfConfig":"110"},{"size":1121,"mtime":1604447600669,"results":"199","hashOfConfig":"110"},{"size":429,"mtime":1602876781100,"results":"200","hashOfConfig":"110"},{"size":2147,"mtime":1609799366939,"results":"201","hashOfConfig":"110"},{"size":144,"mtime":1602011502341,"results":"202","hashOfConfig":"110"},{"size":429,"mtime":1608263276847,"results":"203","hashOfConfig":"110"},{"size":2416,"mtime":1607554926940,"results":"204","hashOfConfig":"110"},{"size":1349,"mtime":1607554926941,"results":"205","hashOfConfig":"110"},{"size":145,"mtime":1602208011396,"results":"206","hashOfConfig":"110"},{"size":149,"mtime":1602208011396,"results":"207","hashOfConfig":"110"},{"size":153,"mtime":1602208011399,"results":"208","hashOfConfig":"110"},{"size":150,"mtime":1602208011398,"results":"209","hashOfConfig":"110"},{"size":148,"mtime":1602208011395,"results":"210","hashOfConfig":"110"},{"size":144,"mtime":1602795234187,"results":"211","hashOfConfig":"110"},{"size":225,"mtime":1608655283138,"results":"212","hashOfConfig":"110"},{"size":228,"mtime":1607559436833,"results":"213","hashOfConfig":"110"},{"size":597,"mtime":1604447600666,"results":"214","hashOfConfig":"110"},{"size":225,"mtime":1602795234187,"results":"215","hashOfConfig":"110"},{"size":100,"mtime":1609870864964,"results":"216","hashOfConfig":"110"},{"size":234,"mtime":1609870864964,"results":"217","hashOfConfig":"110"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},"1f7jcx",{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"220"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"220"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\index.js",[],["437","438"],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\serviceWorker.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\App.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\store\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\bold.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\light.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\medium.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\semibold.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\fonts\\heavy.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\api\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\containers\\workorderscontainer\\index.js",["439"],"//Basic imports\r\nimport React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\n//Components\r\nimport { \r\n    CTASectionComponent, \r\n    DataTableComponent, \r\n    WorkOrderDetailsComponent,\r\n    Alert, \r\n} from '../../components'\r\n\r\n\r\n//Material UI\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Link from '@material-ui/core/Link';\r\n\r\n//Actions\r\nimport { \r\n    oauthFetchToken,\r\n    fetchUsersInformation,\r\n    fetchCTAsData, \r\n    fetchSearchData,\r\n    fetchEmergencyWOData, \r\n    fetchPendingWOData, \r\n    fetchDetailsWOData,\r\n    fetchAssignedToMeWOData,\r\n    fetchUnassignedWOData,\r\n    fetchHistoryWOData,\r\n    fetchNotesWOData,\r\n    fetchAttachmentsWOData,\r\n    fetchWarrantyWOData,\r\n    createNoteWOData,\r\n    updateWOStatus,\r\n    fetchServiceProviders,\r\n} from '../../actions';\r\n\r\n//Context\r\nimport { GlobalContext } from '../../context/globalcontext'\r\n\r\n\r\n//Declaring global variables\r\n//Token\r\nlet token\r\n//User ID\r\nlet userId\r\nlet userData\r\n//CTA component\r\nlet ctadata\r\n//Datatable component\r\nlet tmpdata\r\n//Details component\r\nlet detailsdata\r\n//Tab component\r\nlet historydata\r\nlet notesdata\r\nlet attachmentsdata\r\nlet dtlsID\r\nlet trgtID\r\n//Search\r\nlet searchTerm\r\nlet searchBy\r\n//Warranty\r\nlet warrantydata\r\n//Filter\r\nlet filterByAssetType\r\nlet filterByStatus\r\nlet filterByPriority\r\n\r\nlet newNote\r\nlet newNoteAvailable\r\nlet noteDescription\r\n\r\nlet workOrderUpdateResponse\r\nlet updatedStatus\r\nlet reassignToVal\r\nlet serviceProviders\r\n\r\nclass WorkOrdersBuilder extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            targetId: \"emergencyWO\",\r\n            detailsId: \"\",\r\n            loading: false,\r\n            loadingDetails: false,\r\n            loadingAll: false,\r\n            searchTerm: \"\", \r\n            searchBy: 1,\r\n            filterByAssetType: 1,\r\n            filterByStatus: 1,\r\n            filterByPriority: 1,\r\n            newNote: '',\r\n            newNoteAvailable: false,\r\n            noteDescription: '',\r\n            workOrderUpdateResponse: '',\r\n            updatedStatus: '',\r\n            reassignToVal: 1,\r\n            reassignToAvailable: false,\r\n            itsActive: false\r\n        };\r\n    }    \r\n    /**\r\n     * Description: Set state based on search input \r\n     * Author: Carlos Blanco\r\n     * Date: 10/29/2020\r\n     * Ticket: ET-237\r\n     * */\r\n    handleChangeStateSearchTerm = (value) => {\r\n        searchTerm = value     \r\n    }\r\n    handleSearchTerm = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            searchTerm: value,\r\n        }, this.handleChangeStateSearchTerm(value));\r\n    } \r\n    /**\r\n     * Description: Set state based on search select \r\n     * Author: Carlos Blanco\r\n     * Date: 10/30/2020\r\n     * Ticket: ET-237\r\n     * */    \r\n    handleChangeStateSearchBy = (value) => {\r\n        searchBy = value  \r\n    }    \r\n    handleSearchBy = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            searchBy: value\r\n        }, this.handleChangeStateSearchBy(value));\r\n    }\r\n    /**\r\n     * Description: Create Filter Component\r\n     * Author: Carlos Blanco\r\n     * Created: 11/06/2020\r\n     * Ticket: ET-246\r\n     */  \r\n    handleChangeStateFilterByAssetType = (value) => {\r\n        filterByAssetType = value       \r\n        console.log(filterByAssetType)\r\n    }    \r\n    handleFilterByAssetType = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            filterByAssetType: value,\r\n        }, this.handleChangeStateFilterByAssetType(value))\r\n    } \r\n    /**\r\n     * Description: Create Filter Component\r\n     * Author: Carlos Blanco\r\n     * Created: 11/10/2020\r\n     * Ticket: ET-246\r\n     */  \r\n    handleChangeStateFilterByStatus = (value) => {\r\n        filterByStatus = value \r\n        console.log(filterByStatus)\r\n    }    \r\n    handleFilterByStatus = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            filterByStatus: value,\r\n        }, this.handleChangeStateFilterByStatus(value))        \r\n    } \r\n    /**\r\n     * Description: Create Filter Component\r\n     * Author: Carlos Blanco\r\n     * Created: 11/10/2020\r\n     * Ticket: ET-246\r\n     */  \r\n    handleChangeStateFilterByPriority = (value) => {\r\n        filterByPriority = value       \r\n        console.log(filterByPriority)\r\n    }    \r\n    handleFilterByPriority = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            filterByPriority: value,\r\n        }, this.handleChangeStateFilterByPriority(value))        \r\n    }\r\n\r\n    handleChangeStateFilterClearAll = () => {\r\n        filterByPriority = 1;\r\n        filterByStatus = 1;\r\n        filterByAssetType = 1; \r\n    }\r\n\r\n    handleFilterClearAll = (event) => {\r\n        this.setState({\r\n            filterByAssetType: 1,\r\n            filterByStatus: 1,\r\n            filterByPriority: 1,\r\n        }, this.handleChangeStateFilterClearAll()) \r\n    }\r\n\r\n    handleChangeNoteInput = (value) => {\r\n        noteDescription = value;\r\n        console.log(\"description\", noteDescription)\r\n    }\r\n    handleNoteInput = (event) => {\r\n        let value = event.target.value\r\n        this.setState({\r\n            noteDescription: value\r\n        }, this.handleChangeNoteInput(value))\r\n    }\r\n\r\n    handleAddNote = (isAvailable) => {\r\n        newNoteAvailable = isAvailable\r\n        console.log(newNoteAvailable)\r\n    }\r\n    createNoteWOData = (event) => {\r\n        this.setState({\r\n            newNoteAvailable: !newNoteAvailable,\r\n            loadingDetails: true\r\n        }, this.handleAddNote(!newNoteAvailable))\r\n    }\r\n\r\n    handleChangeReassignToSelect = (value) => {\r\n        reassignToVal = value\r\n        //console.log('reassignToVal', reassignToVal)\r\n    }\r\n    handleReassignToSelect = (event) => {\r\n        console.log(\"id\", event.target)\r\n        let value = event.target.value\r\n        this.setState({\r\n            reassignToVal: value\r\n        }, this.handleChangeReassignToSelect(value))\r\n    }\r\n\r\n    handleUpdateStatus = (target) => {\r\n        updatedStatus = target\r\n        console.log(\"updatedStatus\", updatedStatus)\r\n    }\r\n    updateWOStatus = (event) => {\r\n        let target = event.target.parentElement.getAttribute(\"status\")\r\n        if(target !== 'Reassign') {\r\n            target = target.toUpperCase().replace(' ', '_')\r\n            this.setState({\r\n                updatedStatus: target,\r\n                loadingDetails: true,\r\n            }, this.handleUpdateStatus(target))\r\n        } else {\r\n            target = target.toUpperCase().replace(' ', '_')\r\n            this.setState({\r\n                updatedStatus: target,\r\n                reassignToAvailable: !this.state.reassignToAvailable,\r\n                loadingDetails: true,\r\n            }, this.handleUpdateStatus(target))\r\n        }\r\n    }\r\n    /**\r\n     * Description: Details components click events to change\r\n     * depending on datatable row\r\n     * Author: Carlos Blanco\r\n     * Date: 9/24/2020\r\n     * Ticket: ET-351\r\n     * */\r\n    handleDynamicDetails = (target) => {\r\n        dtlsID = target \r\n    }           \r\n    dynamicDetails = (event) => {\r\n        event.preventDefault();\r\n        let target = event.target.id\r\n        if(target.length>0){\r\n            this.setState({\r\n                detailsId: target,\r\n                loadingDetails: true\r\n            }, this.handleDynamicDetails(target))\r\n        }else{\r\n            target = event.target.closest('div')\r\n            target = target.id\r\n            this.setState({\r\n                detailsId: target,\r\n                loadingDetails: true\r\n            },  this.handleDynamicDetails(target))\r\n        }\r\n    }\r\n    /**\r\n     * Description: Catch id from CTA component and pass\r\n     * to container state in order to set \r\n     * the new data for the datatable\r\n     * Author: Carlos Blanco\r\n     * Date: 9/7/2020\r\n     * Ticket: ET-249\r\n     * */\r\n    handleDynamicData = (target) => {\r\n        trgtID = target\r\n    }      \r\n    dynamicData = (event) => {\r\n        event.preventDefault();\r\n        let target = event.target.id\r\n        if(target.length>0){\r\n            this.setState({\r\n                targetId: target,\r\n                loading: true\r\n            }, this.handleDynamicData(target))\r\n        }else{\r\n            target = event.target.closest('div')\r\n            target = target.id\r\n            this.setState({\r\n                targetId: target,\r\n                loading: true\r\n            }, this.handleDynamicData(target))\r\n        }\r\n        \r\n    }\r\n\r\n    // sortByDate = (a, b) => {\r\n    //     a = new Date(a.createdAt)\r\n    //     b = new Date(b.createdAt)\r\n    //     return b - a\r\n    // }\r\n\r\n    // sortOrderNotesByDate = () => {\r\n    //     let data = notesdata.data;\r\n    //     let workOrderNotes = [];\r\n    //     let proposalNotes = [];\r\n    //     let invoiceNotes = [];\r\n    //     if(!!notesdata.data.workOrderNotes) {\r\n    //         workOrderNotes = notesdata.data.workOrderNotes.sort(this.sortByDate)\r\n    //         data = {...data, workOrderNotes: workOrderNotes}\r\n    //     }\r\n    //     if(!!notesdata.data.proposalNotes) {\r\n    //         proposalNotes = notesdata.data.proposalNotes.sort(this.sortByDate)\r\n    //         data = {...data, proposalNotes: proposalNotes}\r\n    //     }\r\n    //     if(!!notesdata.data.invoiceNotes) {\r\n    //         invoiceNotes = notesdata.data.invoiceNotes.sort(this.sortByDate);\r\n    //         data = {...data, invoiceNotes: invoiceNotes}\r\n    //     }\r\n    //     notesdata = {...notesdata, data}\r\n    // }\r\n    \r\n    async componentDidMount() {\r\n        token = await this.props.oauthFetchToken()\r\n        /*\r\n        userData = await this.props.fetchUsersInformation()\r\n        console.log(userData.userdata.user)\r\n        userId = userData.userdata.user.user_id   \r\n        */\r\n        //Next line it's to develop in local     \r\n        userId = \"2152\"\r\n        this.setState({ \r\n            firstLoading: true\r\n        })\r\n        ctadata = await this.props.fetchCTAsData()\r\n        tmpdata = await this.props.fetchEmergencyWOData()  \r\n        if(tmpdata.data.work_orders!==undefined) {\r\n            dtlsID = tmpdata.data.work_orders[0]['workOrderId']\r\n            this.setState({\r\n                detailsId: dtlsID,\r\n            })\r\n        }\r\n        historydata = await this.props.fetchHistoryWOData()\r\n        detailsdata = await this.props.fetchDetailsWOData()\r\n        notesdata = await this.props.fetchNotesWOData()\r\n        serviceProviders = await this.props.fetchServiceProviders();\r\n        // this.sortOrderNotesByDate()\r\n        warrantydata = await this.props.fetchWarrantyWOData()\r\n        attachmentsdata = await this.props.fetchAttachmentsWOData()\r\n        this.setState({ firstLoading: false })\r\n        trgtID = trgtID===undefined?this.state.targetId:trgtID\r\n    }\r\n\r\n    /**\r\n     * handleId() => loads data changes\r\n     * handleAsyncId() => call async functions since cannot be pass through setState as callback\r\n     * handleChangePrevState() => trigger setState \r\n     * \r\n     * Author: Carlos Blanco\r\n     * Date: 11/13/2020\r\n     * Ticket: ET-735\r\n     * */\r\n    handleId = async(id) => {\r\n        dtlsID = id\r\n        detailsdata = await this.props.fetchDetailsWOData(dtlsID, token)\r\n        notesdata = await this.props.fetchNotesWOData(dtlsID, token)\r\n        // this.sortOrderNotesByDate()\r\n        attachmentsdata = await this.props.fetchAttachmentsWOData(dtlsID, token)\r\n        historydata = await this.props.fetchHistoryWOData(dtlsID, token)\r\n        warrantydata = await this.props.fetchWarrantyWOData(dtlsID, token)                  \r\n    }\r\n\r\n    handleAsyncId = (id) => {\r\n        dtlsID = id\r\n        this.handleId(dtlsID)\r\n    }\r\n    //Change details data\r\n    handleChangePrevState = (id) => {\r\n        dtlsID = id     \r\n        this.setState({\r\n            detailsId: dtlsID,\r\n            loading: true\r\n        }, this.handleAsyncId(id))        \r\n    }\r\n    //move active item to the top of grid\r\n    // array_move = (arr, old_index, new_index) => {\r\n    //     if (new_index >= arr.length) {\r\n    //         let k = new_index - arr.length + 1;\r\n    //         while (k--) {\r\n    //             arr.push(undefined);\r\n    //         }\r\n    //     }\r\n    //     arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n    //     return arr;\r\n    // };\r\n    // isCurrent = (element) => element.workOrderId.toString() === this.state.detailsId.toString();\r\n\r\n    async componentDidUpdate(prevProps, prevState) {\r\n        \r\n        const searchTermIn = this.state.searchTerm\r\n        const searchByIn = this.state.searchBy  \r\n        const filterByInByAssetType = this.state.filterByAssetType\r\n        const filterByInByStatus = this.state.filterByStatus\r\n        const filterByInByPriority = this.state.filterByPriority\r\n        if(\r\n            prevState.targetId !== this.state.targetId ||\r\n            prevState.detailsId !== this.state.detailsId ||\r\n            prevState.searchTerm !== this.state.searchTerm ||\r\n            prevState.searchBy !== this.state.searchBy ||\r\n            prevState.filterByAssetType !== this.state.filterByAssetType ||\r\n            prevState.filterByStatus !== this.state.filterByStatus ||\r\n            prevState.filterByPriority !== this.state.filterByPriority ||\r\n            prevState.newNoteAvailable !== this.state.newNoteAvailable ||\r\n            prevState.updatedStatus !== this.state.updatedStatus ||\r\n            prevState.reassignToAvailable !== this.state.reassignToAvailable\r\n        ) {\r\n            this.setState({loading: true})\r\n            //Clean input if lenght is 0\r\n            if(searchTermIn.length===0) {\r\n                this.setState({\r\n                    searchTerm: \"\",\r\n                })\r\n            }        \r\n            //Set data for DataTable Component\r\n            switch (this.state.targetId) {\r\n                case \"emergencyWO\":\r\n                    if(searchTermIn.length>3 && searchByIn<=1) {\r\n                        let tmp = await this.props.fetchEmergencyWOData()\r\n                        let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        if(filterByInByAssetType.length>0){\r\n                            let dataSearched = dataSearch.filter(term => term['description'].includes(searchTerm.toLowerCase()))\r\n                            dataSearched = dataSearched.filter(term => term['asset']['assetType']['description'].toLowerCase().includes(filterByInByAssetType.toLowerCase()))\r\n                            if(filterByInByPriority.length>0) {\r\n                                dataSearched = dataSearched.filter(term => {\r\n                                    let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                                    return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                                })\r\n                            } else if(filterByInByStatus.length>0) {\r\n                                dataSearched = dataSearched.filter(term => {\r\n                                    let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                                    return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                                })                         \r\n                            }\r\n                            tmpdata = {\r\n                                data: {\r\n                                    work_orders: dataSearched\r\n                                }\r\n                            }                            \r\n                        } else {\r\n                            let dataSearched = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                            console.log(dataSearched)\r\n                            tmpdata = {\r\n                                data: {\r\n                                    work_orders: dataSearched\r\n                                }\r\n                            } \r\n                        }\r\n                    }else if(searchTermIn.length>3 && searchByIn>1){\r\n                        let tmp = await this.props.fetchSearchData()\r\n                        let dataSearched = tmp.data?tmp.data.work_orders:[]                        \r\n                        if(filterByInByPriority.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                            })\r\n                            tmpdata = {\r\n                                data: {\r\n                                    work_orders: dataSearched\r\n                                }\r\n                            }                             \r\n                        } else if(filterByInByStatus.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                            })\r\n                            tmpdata = {\r\n                                data: {\r\n                                    work_orders: dataSearched\r\n                                }\r\n                            }                                                      \r\n                        } else if(filterByInByAssetType.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                            })\r\n                            tmpdata = {\r\n                                data: {\r\n                                    work_orders: dataSearched\r\n                                }\r\n                            }   \r\n                        } else {\r\n                            tmpdata = await this.props.fetchSearchData()\r\n                        }                        \r\n                    //Default filter by asset type without search                        \r\n                    }else if(filterByInByAssetType.length>0) {\r\n                        let tmp = await this.props.fetchEmergencyWOData()\r\n                        let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        let dataSearched = dataSearch.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                        if(filterByInByPriority.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                            })\r\n                        } else if(filterByInByStatus.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                            })                         \r\n                        }                        \r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }\r\n                    //Default filter by status without search   \r\n                    }else if(filterByInByStatus.length>0) {\r\n                        let tmp = await this.props.fetchEmergencyWOData()\r\n                        let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        let dataSearched = dataSearch.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })\r\n                        if(filterByInByAssetType.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                            })\r\n                        } else if(filterByInByPriority.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                            })                         \r\n                        }                        \r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }  \r\n                    //Default filter by priority without search   \r\n                    }else if(filterByInByPriority.length>0) {\r\n                        let tmp = await this.props.fetchEmergencyWOData()\r\n                        let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                        let dataSearched = dataSearch.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })\r\n                        if(filterByInByAssetType.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                            })\r\n                        } else if(filterByInByStatus.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                            })                         \r\n                        }                        \r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                                              \r\n                    }else if(searchTermIn.length === 0 && this.state.firstLoading === false) {\r\n                        tmpdata = await this.props.fetchEmergencyWOData()\r\n                    }                \r\n                    break; \r\n                case \"pendingWO\":\r\n                if(searchTermIn.length>3 && searchByIn<=1) {\r\n                    let tmp = await this.props.fetchPendingWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    if(filterByInByAssetType.length>0){\r\n                        let dataSearched = dataSearch.filter(term => term['description'].includes(searchTerm.toLowerCase()))\r\n                        dataSearched = dataSearched.filter(term => term['asset']['assetType']['description'].toLowerCase().includes(filterByInByAssetType.toLowerCase()))\r\n                        if(filterByInByPriority.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                            })\r\n                        } else if(filterByInByStatus.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                            })                         \r\n                        }\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                            \r\n                    } else {\r\n                        let dataSearched = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        } \r\n                    }\r\n                }else if(searchTermIn.length>3 && searchByIn>1){\r\n                    let tmp = await this.props.fetchSearchData()\r\n                    let dataSearched = tmp.data?tmp.data.work_orders:[]                        \r\n                    if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                             \r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                                                      \r\n                    } else if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }   \r\n                    } else {\r\n                        tmpdata = await this.props.fetchSearchData()\r\n                    }                        \r\n                //Default filter by asset type without search                        \r\n                }else if(filterByInByAssetType.length>0) {\r\n                    let tmp = await this.props.fetchPendingWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    })\r\n                    if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }\r\n                //Default filter by status without search   \r\n                }else if(filterByInByStatus.length>0) {\r\n                    let tmp = await this.props.fetchPendingWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    })\r\n                    if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }  \r\n                //Default filter by priority without search   \r\n                }else if(filterByInByPriority.length>0) {\r\n                    let tmp = await this.props.fetchPendingWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    })\r\n                    if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }                                              \r\n                }else {\r\n                    tmpdata = await this.props.fetchPendingWOData()\r\n                }                \r\n                break;                   \r\n                case \"assignedWO\":\r\n                if(searchTermIn.length>3 && searchByIn<=1) {\r\n                    let tmp = await this.props.fetchAssignedToMeWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    if(filterByInByAssetType.length>0){\r\n                        let dataSearched = dataSearch.filter(term => term['description'].includes(searchTerm.toLowerCase()))\r\n                        dataSearched = dataSearched.filter(term => term['asset']['assetType']['description'].toLowerCase().includes(filterByInByAssetType.toLowerCase()))\r\n                        if(filterByInByPriority.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                            })\r\n                        } else if(filterByInByStatus.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                            })                         \r\n                        }\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                            \r\n                    } else {\r\n                        let dataSearched = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        } \r\n                    }\r\n                }else if(searchTermIn.length>3 && searchByIn>1){\r\n                    let tmp = await this.props.fetchSearchData()\r\n                    let dataSearched = tmp.data?tmp.data.work_orders:[]                        \r\n                    if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                             \r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                                                      \r\n                    } else if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }   \r\n                    } else {\r\n                        tmpdata = await this.props.fetchSearchData()\r\n                    }                        \r\n                //Default filter by asset type without search                        \r\n                }else if(filterByInByAssetType.length>0) {\r\n                    let tmp = await this.props.fetchAssignedToMeWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    })\r\n                    if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }\r\n                //Default filter by status without search   \r\n                }else if(filterByInByStatus.length>0) {\r\n                    let tmp = await this.props.fetchAssignedToMeWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    })\r\n                    if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }  \r\n                //Default filter by priority without search   \r\n                }else if(filterByInByPriority.length>0) {\r\n                    let tmp = await this.props.fetchAssignedToMeWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    })\r\n                    if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }                                              \r\n                }else {\r\n                    tmpdata = await this.props.fetchAssignedToMeWOData()\r\n                }                \r\n                break; \r\n                case \"unassignedWO\":\r\n                if(searchTermIn.length>3 && searchByIn<=1) {\r\n                    let tmp = await this.props.fetchUnassignedWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    if(filterByInByAssetType.length>0){\r\n                        let dataSearched = dataSearch.filter(term => term['description'].includes(searchTerm.toLowerCase()))\r\n                        dataSearched = dataSearched.filter(term => term['asset']['assetType']['description'].toLowerCase().includes(filterByInByAssetType.toLowerCase()))\r\n                        if(filterByInByPriority.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                            })\r\n                        } else if(filterByInByStatus.length>0) {\r\n                            dataSearched = dataSearched.filter(term => {\r\n                                let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                                return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                            })                         \r\n                        }\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                            \r\n                    } else {\r\n                        let dataSearched = dataSearch.filter(term => term['workOrderId'].toString().includes(searchTerm))\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        } \r\n                    }\r\n                }else if(searchTermIn.length>3 && searchByIn>1){\r\n                    let tmp = await this.props.fetchSearchData()\r\n                    let dataSearched = tmp.data?tmp.data.work_orders:[]                        \r\n                    if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                             \r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }                                                      \r\n                    } else if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                        tmpdata = {\r\n                            data: {\r\n                                work_orders: dataSearched\r\n                            }\r\n                        }   \r\n                    } else {\r\n                        tmpdata = await this.props.fetchSearchData()\r\n                    }                        \r\n                //Default filter by asset type without search                        \r\n                }else if(filterByInByAssetType.length>0) {\r\n                    let tmp = await this.props.fetchUnassignedWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                    })\r\n                    if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }\r\n                //Default filter by status without search   \r\n                }else if(filterByInByStatus.length>0) {\r\n                    let tmp = await this.props.fetchUnassignedWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                    })\r\n                    if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByPriority.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }  \r\n                //Default filter by priority without search   \r\n                }else if(filterByInByPriority.length>0) {\r\n                    let tmp = await this.props.fetchUnassignedWOData()\r\n                    let dataSearch = tmp.data?tmp.data.work_orders:[]\r\n                    let dataSearched = dataSearch.filter(term => {\r\n                        let notNull = term['priority']!==null?term['priority']['description']:\"\"\r\n                        return notNull.toLowerCase().includes(filterByInByPriority.toLowerCase())\r\n                    })\r\n                    if(filterByInByAssetType.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['asset']!==null?term['asset']['assetType']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByAssetType.toLowerCase())\r\n                        })\r\n                    } else if(filterByInByStatus.length>0) {\r\n                        dataSearched = dataSearched.filter(term => {\r\n                            let notNull = term['status']!==null?term['status']['description']:\"\"\r\n                            return notNull.toLowerCase().includes(filterByInByStatus.toLowerCase())\r\n                        })                         \r\n                    }                        \r\n                    tmpdata = {\r\n                        data: {\r\n                            work_orders: dataSearched\r\n                        }\r\n                    }                                              \r\n                }else {\r\n                    tmpdata = await this.props.fetchUnassignedWOData()\r\n                }                \r\n                break;                                                       \r\n                default:\r\n                    tmpdata = await this.props.fetchEmergencyWOData()\r\n                    break;\r\n            }\r\n\r\n            const handleId = async(dtlsID) => {\r\n                if(this.state.firstLoading === false) {\r\n                    detailsdata = await this.props.fetchDetailsWOData(dtlsID, token)\r\n                    notesdata = await this.props.fetchNotesWOData(dtlsID, token)\r\n                    serviceProviders = await this.props.fetchServiceProviders(dtlsID, token);\r\n                    // this.sortOrderNotesByDate()\r\n                    attachmentsdata = await this.props.fetchAttachmentsWOData(dtlsID, token)\r\n                    historydata = await this.props.fetchHistoryWOData(dtlsID, token)\r\n                    warrantydata = await this.props.fetchWarrantyWOData(dtlsID, token)\r\n                }\r\n                this.setState({loadingDetails: false})\r\n            }\r\n            //Change details data\r\n            const handleChangePrevState = (dtlsID) => {\r\n                const id = dtlsID\r\n                handleId(id)\r\n            }\r\n\r\n            // let currentIndex =  tmpdata.data.work_orders.findIndex(this.isCurrent);\r\n            // if(currentIndex === -1) currentIndex = 0\r\n            // this.array_move(tmpdata.data.work_orders, currentIndex, 0)\r\n\r\n            const prevSteDtls = prevState.detailsId\r\n            const currentSteDtls = this.state.detailsId\r\n            const tmpDtls = tmpdata.data!==undefined?\r\n                                (tmpdata.data.work_orders!==null?\r\n                                    (tmpdata.data.work_orders[0]!==undefined?\r\n                                        tmpdata.data.work_orders[0]['workOrderId']:\r\n                                        dtlsID):dtlsID):\r\n                                        dtlsID\r\n            //Choose if details preview it's based on the first response element or the selected by the user when clicks the row\r\n            if( prevSteDtls !== ''){\r\n                if( prevSteDtls !== currentSteDtls ) {\r\n                    this.setState({\r\n                        detailsId: dtlsID,\r\n                        loadingDetails: true\r\n                    }, handleChangePrevState(dtlsID)) \r\n                } else {\r\n                    dtlsID = tmpDtls             \r\n                    this.setState({\r\n                        detailsId: dtlsID,\r\n                    }, handleChangePrevState(dtlsID))    \r\n                }\r\n            }\r\n            \r\n            const prevNoteStatus = prevState.newNoteAvailable\r\n            const currentNoteStatus = this.state.newNoteAvailable\r\n            if( prevNoteStatus !== currentNoteStatus) {\r\n                newNote = await this.props.createNoteWOData(noteDescription, dtlsID, token, userId)\r\n                this.setState({\r\n                    newNote: newNote.data,\r\n                    loadingDetails: true\r\n                }, handleChangePrevState(dtlsID))\r\n            }\r\n\r\n            const prevUpdatedStatus = prevState.updatedStatus\r\n            const currentUpdatedStatus = this.state.updatedStatus\r\n            if( prevUpdatedStatus !== currentUpdatedStatus) {\r\n                workOrderUpdateResponse = await this.props.updateWOStatus(dtlsID, token, updatedStatus, reassignToVal)\r\n                if(workOrderUpdateResponse) {\r\n                    this.setState({\r\n                        workOrderUpdateResponse: workOrderUpdateResponse,\r\n                        loadingDetails: true\r\n                    }, handleChangePrevState(dtlsID))\r\n                } else {\r\n                    alert(\"Server Error Occured\")\r\n                }\r\n            }\r\n\r\n            // console.log(\"dltsID\", this.state.deta)\r\n            //Normalize state to avoid missing data or state changes\r\n            this.setState({\r\n                detailsId: dtlsID,\r\n                targetId: this.state.targetId,\r\n                loading: false\r\n            }, handleChangePrevState(dtlsID)) \r\n            \r\n        }\r\n    }\r\n    render() {\r\n\r\n        const globalState = {\r\n            dynamicDetails: this.dynamicDetails,\r\n            dynamicData: this.dynamicData,\r\n            handleSearchTerm: this.handleSearchTerm,\r\n            handleSearchBy: this.handleSearchBy,\r\n            handleFilterByAssetType: this.handleFilterByAssetType,\r\n            handleFilterByStatus: this.handleFilterByStatus,\r\n            handleFilterByPriority: this.handleFilterByPriority,\r\n            handleFilterClearAll: this.handleFilterClearAll,\r\n            createNoteWOData: this.createNoteWOData,\r\n            updateWOStatus: this.updateWOStatus,\r\n            handleNoteInput: this.handleNoteInput,\r\n            handleReassignToSelect: this.handleReassignToSelect,\r\n            reassignToVal: this.state.reassignToVal,\r\n            currentDtlsId: this.state.detailsId,\r\n            noteDescription: this.state.noteDescription,\r\n            filterByStateAssetType: this.state.filterByAssetType,\r\n            filterByStateStatus: this.state.filterByStatus,\r\n            filterByStatePriority: this.state.filterByPriority,                        \r\n            searchByState: this.state.searchBy,\r\n            searchTermState: this.state.searchTerm,\r\n        }\r\n        return (\r\n            <GlobalContext.Provider value={globalState}>\r\n                <div className=\"work-orders-container\">\r\n                    <Alert severity=\"warning\" variant=\"filled\">\r\n                        <Link href=\"/admin/WorkOrders\" target=\"_blank\" rel=\"noopener\" color=\"inherit\">\r\n                            <i>Missing Something? Go to the Old Version</i>\r\n                        </Link>\r\n                    </Alert>\r\n                    <Grid className=\"cta-section-component\">\r\n                        <CTASectionComponent \r\n                            ctadata={ctadata}\r\n                            tmpdata={tmpdata}\r\n                            targetdata={trgtID} \r\n                        />\r\n                    </Grid>            \r\n                    <Grid container className=\"content-section\">\r\n                        <Grid item xs={12} md={7} lg={7}>\r\n                            <DataTableComponent\r\n                                tmpdata={tmpdata}\r\n                                loading={this.state.loading}\r\n                                firstLoading={this.state.firstLoading}\r\n                            />\r\n                        </Grid>        \r\n                        <Grid item xs={12} md={5} lg={5}>\r\n                            <WorkOrderDetailsComponent\r\n                                loadingDetails={this.state.loadingDetails}\r\n                                detailsdata={detailsdata}\r\n                                history={historydata} \r\n                                attachments={attachmentsdata} \r\n                                notes={notesdata}\r\n                                serviceProviders={serviceProviders}\r\n                                firstLoading={this.state.firstLoading}\r\n                                warranty={warrantydata}\r\n                            />\r\n                        </Grid>  \r\n                    </Grid>  \r\n                </div>   \r\n            </GlobalContext.Provider>                   \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    oauthFetchToken: () => dispatch(oauthFetchToken()),\r\n    fetchCTAsData: () => dispatch(fetchCTAsData(token, userId)),   \r\n    fetchSearchData: () => dispatch(fetchSearchData(searchTerm, searchBy, token, userId)),   \r\n    fetchWarrantyWOData: () => dispatch(fetchWarrantyWOData(dtlsID, token)),   \r\n    fetchPendingWOData: () => dispatch(fetchPendingWOData(token, userId)),\r\n    fetchEmergencyWOData: () => dispatch(fetchEmergencyWOData(token, userId)),\r\n    fetchUsersInformation: () => dispatch(fetchUsersInformation(token)),\r\n    fetchDetailsWOData: () => dispatch(fetchDetailsWOData(dtlsID, token)),\r\n    updateWOStatus: () => dispatch(updateWOStatus(dtlsID, token, updatedStatus, reassignToVal)),\r\n    fetchServiceProviders: () => dispatch(fetchServiceProviders(dtlsID, token)),\r\n    fetchAssignedToMeWOData: () => dispatch(fetchAssignedToMeWOData(token, userId)),\r\n    fetchUnassignedWOData: () => dispatch(fetchUnassignedWOData(token, userId)),\r\n    fetchHistoryWOData: () => dispatch(fetchHistoryWOData(dtlsID, token)),\r\n    fetchNotesWOData: () => dispatch(fetchNotesWOData(dtlsID, token)),\r\n    createNoteWOData: () => dispatch(createNoteWOData(noteDescription, dtlsID, token, userId)),\r\n    fetchAttachmentsWOData: ()=> dispatch(fetchAttachmentsWOData(dtlsID, token)),\r\n})\r\n\r\n\r\nconst WorkOrdersContainer = connect(mapStateToProps, mapDispatchToProps)(WorkOrdersBuilder)\r\n\r\nexport default WorkOrdersContainer;","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\context\\globalcontext\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\oauthtokenreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\useraccountdatareducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\emergencyworkordersreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderdetailsreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\pendingworkordersreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\ctasectionreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workordersnotesreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderunassignedreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workordershistoryreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\advancedsearchreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderattachmentsreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\workorderassignedtomereducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\warrantymodalreducer\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\advancedsearchcomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\alertComponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\useraccountdataactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\ctasectionactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\assignedtomeworkordersactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\pendingworkordersactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\unassignedworkordersactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\emercencyworkordersactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderdetailsactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\advancedsearchactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workordernotesactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderattachmentsactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\workorderhistoryactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\warrantymodalactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\actions\\oauthtokenactions\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\constants\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\reducers\\initialstate\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\common\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\helpers\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbypriority\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbystatus\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\locationdetailslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\enhanceddetailslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\linkactionslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\boxeddetailslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\workorderdesriptionclayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\mainactionslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\maindetailslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\detailsimagelayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\layouts\\detailslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderprioritylayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\helpers\\rendernotnull\\index.js",["440"],"//Basic imports\r\nimport React from 'react';\r\n\r\n//Material UI\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n//Layouts\r\nimport {\r\n    DetailsImageLayout,\r\n    MainDetails,\r\n    MainActions,\r\n    LinkActions,\r\n    WorkOrderDescription,\r\n    EnhancedDetails,\r\n    BoxedDetails,\r\n    LocationDetails\r\n} from '../../layouts'\r\n\r\n//Components\r\nimport { \r\n    TabsComponent,\r\n    //ModalComponent\r\n} from '../../../../components'\r\n\r\nexport const RenderNotNull = ({detailsdata, history, attachments, notes, warranty, serviceProviders}) => {   \r\n    //In null case\r\n    const nullVal = null;    \r\n    //Image Section\r\n    let image\r\n    //Store data to display in new array\r\n    let assetName\r\n    let workOrderId\r\n    let woType\r\n    let manufacturer\r\n    let model\r\n    let serial\r\n    let assetType\r\n    let warrantyLabel\r\n    //Enhanced Section\r\n    let id\r\n    let description\r\n    let status\r\n    let priority\r\n    let tradeType\r\n    let problemType\r\n    let categoryType\r\n    let nte\r\n    //Border Section\r\n    let currentEta\r\n    let serviceProvider\r\n    let assignTo\r\n    let invoiceStatus\r\n    let invoiceStatusDesc\r\n    //Location Section\r\n    let locationAddress\r\n    let location\r\n    let locationPhone\r\n    //Check PM\r\n    let ifPM\r\n    let proposalStatus\r\n    let proposalId    \r\n    let invoiceId\r\n    let serviceProviderLast\r\n    \r\n    let isAvailable\r\n\r\n    if(detailsdata!==undefined){\r\n        //If is a PM\r\n        if(detailsdata.data.work_order===undefined) {\r\n            isAvailable = true\r\n        } else {\r\n\r\n            if(detailsdata.data.work_order.asset!==nullVal) {\r\n                ifPM = false\r\n            } else {\r\n                ifPM = true\r\n            }\r\n            //Image Section\r\n            if(detailsdata.data.work_order.asset!==nullVal) {\r\n                let pre_image = detailsdata.data.work_order.asset.assetImage\r\n                image = pre_image[0]!==undefined?pre_image[0]['fileName']:nullVal;\r\n            }         \r\n            //Short Detail Section\r\n            if(detailsdata.data.work_order.asset!==nullVal){\r\n                let pre_assetName = detailsdata.data.work_order.asset\r\n                assetName = pre_assetName!==nullVal?detailsdata.data.work_order.asset.name:nullVal;\r\n            }        \r\n            if(detailsdata.data.work_order!==nullVal){\r\n                workOrderId = detailsdata.data.work_order.id!==nullVal?detailsdata.data.work_order.id:nullVal;\r\n            }          \r\n            woType = detailsdata.data.work_order.asset!==nullVal?detailsdata.data.work_order.woType:nullVal;\r\n            if(detailsdata.data.work_order.asset!==nullVal){\r\n                let pre_manufacturer = detailsdata.data.work_order.asset.manufacturer\r\n                manufacturer = pre_manufacturer!==nullVal?detailsdata.data.work_order.asset.manufacturer.companyName:nullVal;\r\n            }\r\n            model = detailsdata.data.work_order.asset!==nullVal?detailsdata.data.work_order.asset.modelNumber:nullVal;\r\n            serial = detailsdata.data.work_order.asset!==nullVal?detailsdata.data.work_order.asset.serialNumber:nullVal;\r\n            assetType = detailsdata.data.work_order.assetType!==nullVal?detailsdata.data.work_order.assetType.name:nullVal;\r\n            warrantyLabel = detailsdata.data.work_order.asset!==nullVal?detailsdata.data.work_order.warrantyAvailable:nullVal;\r\n            //Enhanced Section\r\n            id = detailsdata.data.work_order.id!==nullVal?detailsdata.data.work_order.id:nullVal;\r\n            description = detailsdata.data.work_order.description!==nullVal?detailsdata.data.work_order.description:nullVal;\r\n            status = detailsdata.data.work_order.workOrderStatus!==nullVal?detailsdata.data.work_order.workOrderStatus:nullVal;\r\n            priority = detailsdata.data.work_order.priority!==nullVal?detailsdata.data.work_order.priority.name:nullVal;\r\n            tradeType = detailsdata.data.work_order.tradeType!==nullVal?detailsdata.data.work_order.tradeType:nullVal;\r\n            problemType = detailsdata.data.work_order.problemType!==nullVal?detailsdata.data.work_order.problemType.name:nullVal;\r\n            categoryType = detailsdata.data.work_order.categoryType!==nullVal?detailsdata.data.work_order.categoryType.name:nullVal;\r\n            nte = detailsdata.data.work_order.nte!==nullVal?detailsdata.data.work_order.nte:nullVal;\r\n            if(detailsdata.data.work_order.proposal!==nullVal){\r\n                let pre_proposalStatus = detailsdata.data.work_order.proposal.proposalStatus\r\n                proposalStatus = pre_proposalStatus!==nullVal?detailsdata.data.work_order.proposal.proposalStatus.description:nullVal;\r\n                proposalId = detailsdata.data.work_order.proposal.proposalId\r\n            }  \r\n            assignTo = detailsdata.data.work_order.assignTo!==nullVal?detailsdata.data.work_order.assignTo.user:nullVal;   \r\n            //Bordered Section \r\n            invoiceStatus = detailsdata.data.work_order.invoice.length!==0?detailsdata.data.work_order.invoice.reduce((acc, crr, idx)=> acc+(idx===0?'':', ')+crr.invoiceStatusDesc.description, ''):nullVal;\r\n            invoiceId = detailsdata.data.work_order.invoice.length!==0?detailsdata.data.work_order.invoice[0].invoiceId:nullVal;\r\n            serviceProvider = detailsdata.data.work_order.serviceProviderProfile!==nullVal?detailsdata.data.work_order.serviceProviderProfile.firstName:nullVal;\r\n            serviceProviderLast = detailsdata.data.work_order.serviceProviderProfile!==nullVal?detailsdata.data.work_order.serviceProviderProfile.lastName:nullVal;\r\n            currentEta = detailsdata.data.work_order.currentEta!==nullVal?detailsdata.data.work_order.currentEta:nullVal;\r\n            //Location Section\r\n            locationAddress = detailsdata.data.work_order.location!==nullVal?detailsdata.data.work_order.location.address1:nullVal;\r\n            location = detailsdata.data.work_order.location!==nullVal?detailsdata.data.work_order.location.name:nullVal;\r\n            locationPhone = detailsdata.data.work_order.location!==nullVal?detailsdata.data.work_order.location.phone1:nullVal;\r\n            \r\n\r\n    }\r\n    return(\r\n        <div>\r\n            {isAvailable&& <div>Something went wrong!</div>}\r\n            {!isAvailable&& <>\r\n            <Grid container spacing={0}>\r\n                <DetailsImageLayout\r\n                    image={image}\r\n                    ifPM={ifPM}\r\n                />\r\n                <MainDetails \r\n                    workOrderId={workOrderId}\r\n                    assetName={assetName}\r\n                    woType={woType}\r\n                    manufacturer={manufacturer}\r\n                    model={model}\r\n                    serial={serial}\r\n                    assetType={assetType}\r\n                    warrantyLabel={warrantyLabel}\r\n                    warranty={warranty}\r\n                    nullVal={nullVal}\r\n                />\r\n                <MainActions\r\n                    serviceProviders={serviceProviders}\r\n                    status={status}\r\n                />\r\n            </Grid>\r\n            <LinkActions\r\n                workOrderId={workOrderId}\r\n                invoiceStatus={invoiceStatus}\r\n                invoiceId={invoiceId}\r\n                proposalStatus={proposalStatus}\r\n                proposalId={proposalId}\r\n            />\r\n            <Divider/>\r\n            <Grid container spacing={0}>\r\n                <WorkOrderDescription\r\n                    id={id}\r\n                    description={description}\r\n                    nullVal={nullVal}\r\n                />\r\n                <EnhancedDetails \r\n                    status={status}\r\n                    priority={priority}\r\n                    tradeType={tradeType}\r\n                    problemType={problemType}\r\n                    categoryType={categoryType}\r\n                    woType={woType}\r\n                    nte={nte}\r\n                    nullVal={nullVal}\r\n                />\r\n                <BoxedDetails \r\n                    proposalId={proposalId}\r\n                    invoiceId={invoiceId}\r\n                    currentEta={currentEta}\r\n                    serviceProvider={serviceProvider}\r\n                    serviceProviderLast={serviceProviderLast}\r\n                    proposalStatus={proposalStatus}\r\n                    invoiceStatus={invoiceStatus}\r\n                    assignTo={assignTo}\r\n                    nullVal={nullVal}\r\n                />\r\n                <LocationDetails\r\n                    locationAddress={locationAddress}\r\n                    location={location}\r\n                    locationPhone={locationPhone}\r\n                    nullVal={nullVal}\r\n                />\r\n            </Grid>\r\n            <Divider/>  \r\n            <TabsComponent\r\n                history={history}\r\n                attachments={attachments}\r\n                notes={notes}\r\n            /></>}                      \r\n        </div>            \r\n    )}\r\n}\r\n        ","C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\helpers\\rendernull\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderstatuslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderregularrowlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rowbuilderlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\reactwindowtablelayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\renderimagelayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rendersingleitemlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\tablecolumnslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\layouts\\rendermultiitemlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\modalcomponent\\helpers\\getmodalstyle\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\filteringcomponent\\helpers\\filterbyassettype\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rowbuilderlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\reactwindowtablelayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\tablecolumnslayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\popupcomponent\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\renderdateitemlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rendersingleitemlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\workorderdetailscomponent\\constants\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\layouts\\rendermultiitemlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\constants\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\ctasectionlayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\ctasectioncomponent\\layouts\\featuredctalayout\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\cancel.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\complete.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\reassigned.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\not-fixed.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\assets\\icons\\add-note.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\createitemdatahelper\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\datatablecomponent\\helpers\\itemkeyhelper\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\itemkeyhelper\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\components\\tabscomponent\\helpers\\createitemdatahelper\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\faker\\index.js",[],"C:\\Users\\User\\Box Sync\\Ecotrak\\repositories\\lp-work-orders-react\\src\\faker\\ctasectionactions\\index.js",[],{"ruleId":"441","replacedBy":"442"},{"ruleId":"443","replacedBy":"444"},{"ruleId":"445","severity":1,"message":"446","line":47,"column":5,"nodeType":"447","messageId":"448","endLine":47,"endColumn":13},{"ruleId":"445","severity":1,"message":"449","line":54,"column":9,"nodeType":"447","messageId":"448","endLine":54,"endColumn":26},"no-native-reassign",["450"],"no-negated-in-lhs",["451"],"no-unused-vars","'userData' is defined but never used.","Identifier","unusedVar","'invoiceStatusDesc' is defined but never used.","no-global-assign","no-unsafe-negation"]